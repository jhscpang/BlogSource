{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/201703/ConcurrentHashMap删除操作对比图.png","path":"images/201703/ConcurrentHashMap删除操作对比图.png","modified":1,"renderable":0},{"_id":"source/images/201703/观察者模式类结构图.png","path":"images/201703/观察者模式类结构图.png","modified":1,"renderable":0},{"_id":"source/images/201703/模板方法模式类结构图.png","path":"images/201703/模板方法模式类结构图.png","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/images/201704/扫码登陆示意图.png","path":"images/201704/扫码登陆示意图.png","modified":1,"renderable":0},{"_id":"source/images/201703/责任链模式类结构图.png","path":"images/201703/责任链模式类结构图.png","modified":1,"renderable":0},{"_id":"source/images/201704/一致性哈希示意图.png","path":"images/201704/一致性哈希示意图.png","modified":1,"renderable":0},{"_id":"source/images/201704/删除一个节点后的一致性哈希示意图.png","path":"images/201704/删除一个节点后的一致性哈希示意图.png","modified":1,"renderable":0},{"_id":"source/images/201704/命令模式类结构图.png","path":"images/201704/命令模式类结构图.png","modified":1,"renderable":0},{"_id":"source/images/201704/虚拟节点一致性哈希示意图.png","path":"images/201704/虚拟节点一致性哈希示意图.png","modified":1,"renderable":0},{"_id":"source/images/201703/参考文献第三步.png","path":"images/201703/参考文献第三步.png","modified":1,"renderable":0},{"_id":"source/images/201703/表锁和桶锁对比图.png","path":"images/201703/表锁和桶锁对比图.png","modified":1,"renderable":0},{"_id":"source/images/201703/参考文献第四步.png","path":"images/201703/参考文献第四步.png","modified":1,"renderable":0},{"_id":"source/images/201704/开关灯泡电风扇示意图.png","path":"images/201704/开关灯泡电风扇示意图.png","modified":1,"renderable":0},{"_id":"source/images/201703/参考文献第一步.png","path":"images/201703/参考文献第一步.png","modified":1,"renderable":0},{"_id":"source/images/201703/参考文献第二步.png","path":"images/201703/参考文献第二步.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1490605626000},{"_id":"source/CNAME","hash":"1e8c7cf4dc5b7311a0f8eafd78cb1f75817d512c","modified":1490617565000},{"_id":"themes/maupassant/.DS_Store","hash":"0bbbd6db6699b53d330d7ba4afddb1f1b76ed211","modified":1491224289000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1490592631000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1490592631000},{"_id":"themes/maupassant/_config.yml","hash":"7456d760d258e6f1707d2011ce5a2acc199bdc29","modified":1491228903000},{"_id":"themes/maupassant/README.md","hash":"f3ec5e1d9d865f8bf90365a3c0adf63afb392734","modified":1490592631000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1490592631000},{"_id":"source/_posts/ConcurrentHashMap的锁分离技术.md","hash":"b78832110156516e4864fe82c4f176dcf7b06cf6","modified":1490673928000},{"_id":"source/_posts/一致性哈希技术.md","hash":"200ce3f9a2aa11d3749dcf4e42c03a38e4619709","modified":1491374277000},{"_id":"source/_posts/倒排索引技术.md","hash":"6d952672f30d227b304e92ec41c64132d71058a0","modified":1491476489000},{"_id":"source/_posts/使用sign签名和token进行服务器端安全校验原理.md","hash":"7285fb0d760b3b079309d602077f5e6bbcfa5d83","modified":1491726840000},{"_id":"source/_posts/最佳股票购买和卖出时间算法.md","hash":"91ff28982889f0c0d1b470a797289cb3ec0f46e7","modified":1490670187000},{"_id":"source/_posts/自动生成参考文献技巧.md","hash":"3e54126f85c6599a5cf9b1734754c95c04462509","modified":1490765312000},{"_id":"source/_posts/网站扫码登陆原理.md","hash":"323dcf9da387b85077673e2ee68e216d3ee1a4d4","modified":1491206534000},{"_id":"source/_posts/设计模式之命令模式.md","hash":"b98c6d780ea96d9e4edd17b47b2004520d3fbdfe","modified":1491221710000},{"_id":"source/_posts/设计模式之备忘录模式.md","hash":"cf4f06d55a79f468088e1284e2c8ed63d0f71ab7","modified":1491362175000},{"_id":"source/_posts/设计模式之模板方法模式.md","hash":"07d525d534cee718284b773076cfec5138e239d2","modified":1491188199000},{"_id":"source/_posts/设计模式之观察者模式.md","hash":"633ce58a62583c5477d4444f6cd59f369f078a92","modified":1491188201000},{"_id":"source/_posts/设计模式之责任链模式.md","hash":"fb0211be4ca0811fe6cb1797063e333a3e4fd7c2","modified":1491188202000},{"_id":"source/about/index.md","hash":"34b79d7e1efff0245d2a07feca8e34465599cf0a","modified":1490602803000},{"_id":"source/history/index.md","hash":"72fe698c6ebe5644834012cbd1b5bba0c744b288","modified":1491229218000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1490592631000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1490592631000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1490592627000},{"_id":"themes/maupassant/.git/index","hash":"d7b6f5f84b74eb8b2a7246bd8784ba41490b13fe","modified":1490592631000},{"_id":"themes/maupassant/.git/packed-refs","hash":"9e0df9b4a1f715d93102187da88cfb7b5ba3e39e","modified":1490592631000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1490592631000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1490592631000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1490592631000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1490592631000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1490592631000},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1490592631000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1491229279000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1490592631000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1490592631000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"779c736a61a999292156ed23625b46e4ad69af86","modified":1490592631000},{"_id":"themes/maupassant/layout/base.jade","hash":"ed5ae4c326bec4100e0c5efbd3d04949530be71c","modified":1490592631000},{"_id":"themes/maupassant/layout/index.jade","hash":"2d40b673a03c49408724dd9748c8bc0a68259983","modified":1490592631000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1490592631000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1490592631000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1490592631000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1490592631000},{"_id":"source/images/201703/ConcurrentHashMap删除操作对比图.png","hash":"5fcc4fd9e651ab502c97859f22025bdc504064be","modified":1490628228000},{"_id":"source/images/201703/观察者模式类结构图.png","hash":"71e6e1abe33d47d11973af30d60001be738ac308","modified":1490676951000},{"_id":"source/images/201703/模板方法模式类结构图.png","hash":"ac9fe6aa0eaeba2acf29dab77c64511b0a4f376a","modified":1490686252000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1490592627000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1490592627000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1490592627000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"f6402c0f045132ef6292e2d8ba9b929157795e6e","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"188df4e77b0d5e13920606602929c03dcd857d56","modified":1491227457000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"af6f1205c3fe679749bb254be0f0967b38604351","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1490592631000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1490592631000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1490592631000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1490592631000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1490592631000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1490592631000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1490592631000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1490592631000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1490592631000},{"_id":"themes/maupassant/source/css/style.scss","hash":"158f1ebecf7b994ffae5332a627465f6bf38113b","modified":1490592631000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490592631000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490592631000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490592631000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490592631000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490592631000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1490592631000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490592631000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1490592631000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1490592631000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1490592631000},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1490592631000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1490592631000},{"_id":"source/images/201704/扫码登陆示意图.png","hash":"d2b89bfd84579b5442dac5ccd68aac42a5175eae","modified":1491203498000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"5f84803a3e03652fc3a96c777a20eab524aa0c8d","modified":1490592631000},{"_id":"themes/maupassant/.git/objects/pack/pack-57295b54b08abcf5da746b359d2dd2553e0c3e48.idx","hash":"8fef8b19fad8faceba55dbcfe66e6d7f739beab3","modified":1490592631000},{"_id":"source/images/201703/责任链模式类结构图.png","hash":"a249565083b82337b728472ffe4eb00cb3dd0cfe","modified":1490799871000},{"_id":"source/images/201704/一致性哈希示意图.png","hash":"6da6a7565f21180003aa98893d3e1aebcaf57811","modified":1491372209000},{"_id":"source/images/201704/删除一个节点后的一致性哈希示意图.png","hash":"150ee0a234ae9510dd4853ecba0214794c09d313","modified":1491372993000},{"_id":"source/images/201704/命令模式类结构图.png","hash":"da7aa05c3c5f8bc543f48e3b91f76231588eb632","modified":1491218430000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"f6402c0f045132ef6292e2d8ba9b929157795e6e","modified":1490592631000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1490592631000},{"_id":"source/images/201704/虚拟节点一致性哈希示意图.png","hash":"78c61f11434cec1ff89037b3d5df6ad1208edd77","modified":1491374019000},{"_id":"source/images/201703/参考文献第三步.png","hash":"5d7750df7bfa73d6261c8c61dfacb88424195121","modified":1490765042000},{"_id":"source/images/201703/表锁和桶锁对比图.png","hash":"3c19165e0e212f3b3ab8b616c4bf36764297dc58","modified":1490627271000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"f6402c0f045132ef6292e2d8ba9b929157795e6e","modified":1490592631000},{"_id":"source/images/201703/参考文献第四步.png","hash":"382d13333a576a61d2385ab521df6a06599d0130","modified":1490765076000},{"_id":"source/images/201704/开关灯泡电风扇示意图.png","hash":"af1766035b51f0a704e5a5cb6d4ae734a256200d","modified":1491217201000},{"_id":"themes/maupassant/.git/objects/pack/pack-57295b54b08abcf5da746b359d2dd2553e0c3e48.pack","hash":"e4ec358a4964121fb8d29159890e30c04d7286f3","modified":1490592631000},{"_id":"source/images/201703/参考文献第一步.png","hash":"604385841dd761dd78fc311639dfd5a225b2cf1a","modified":1490764953000},{"_id":"source/images/201703/参考文献第二步.png","hash":"0ca8a5fdcac0066ef07e2c04c3202dca6321c3cd","modified":1490764995000}],"Category":[{"name":"算法","_id":"cj20hwd0e0004i3i7830whapc"},{"name":"Java","_id":"cj20hwd0o0009i3i7nxo6wlrl"},{"name":"写作技巧","_id":"cj20hwd0x000mi3i73zwwcx5e"},{"name":"Web开发","_id":"cj20hwd12000ri3i73vhaoejp"},{"name":"设计模式","_id":"cj20hwd16000xi3i7fid8yva9"}],"Data":[],"Page":[{"title":"关于作者","date":"2017-03-27T06:36:13.000Z","_content":"\n\n## 姓名\n\n庞超\n\n## 邮箱\n\npangchao620@163.com\n\n","source":"about/index.md","raw":"---\ntitle: 关于作者\ndate: 2017-03-27 14:36:13\n---\n\n\n## 姓名\n\n庞超\n\n## 邮箱\n\npangchao620@163.com\n\n","updated":"2017-03-27T08:20:03.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj20hwd090001i3i7qdfks5ju","content":"<h2 id=\"姓名\"><a href=\"#姓名\" class=\"headerlink\" title=\"姓名\"></a>姓名</h2><p>庞超</p>\n<h2 id=\"邮箱\"><a href=\"#邮箱\" class=\"headerlink\" title=\"邮箱\"></a>邮箱</h2><p>pangchao620@163.com</p>\n","excerpt":"","more":"<h2 id=\"姓名\"><a href=\"#姓名\" class=\"headerlink\" title=\"姓名\"></a>姓名</h2><p>庞超</p>\n<h2 id=\"邮箱\"><a href=\"#邮箱\" class=\"headerlink\" title=\"邮箱\"></a>邮箱</h2><p>pangchao620@163.com</p>\n"},{"title":"时间轴","date":"2017-04-03T13:13:28.000Z","layout":"timeline","_content":"","source":"history/index.md","raw":"---\ntitle: 时间轴\ndate: 2017-04-03 21:13:28\nlayout: timeline\n---\n","updated":"2017-04-03T14:20:18.000Z","path":"history/index.html","comments":1,"_id":"cj20hwd0c0003i3i71k5eyls7","content":"","excerpt":"","more":""}],"Post":[{"title":"一致性哈希技术","date":"2017-04-05T12:01:52.000Z","_content":"\n## 概述\n\n在分布式的环境下有这样一个基本场景：比如你有N个缓存服务器做数据缓存，通用方法计算方法是计算object的hash值，然后均匀的映射到N个缓存服务器里，公式是：hash(object) % N。这样的计算方法在理想情况下可以工作的不错，但是现实中往往会改变缓存服务器的数量，那么通过上面这个公式计算出来的缓存映射就全部失效了。\n\n优化上面遇到的问题的方法是使用一致性哈希算法。简单的说，一致性哈希算法要求在移除或添加一个缓存服务器时，它能够尽可能小的改变已存在key映射关系，尽可能的满足单调性的要求。单调性要求是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中，哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。\n\n本文参考的帖子有如下几个:\nhttp://blog.csdn.net/kinger0/article/details/49760751\nhttp://blog.csdn.net/sparkliang/article/details/5279393\n\n## 原理\n\n\n结合下面的一致性哈希示意图，一致性哈希算法的基本步骤如下：\n\n  1. 构造一个空间，想象成环状，例如网上常用的的0 ~ 2^32-1这个空间。\n  2. 将服务器通过哈希函数映射到环上(如图中蓝色节点)，通常使用服务器ip或者服务器名作为hash函数的输入。\n  3. 将对象object通过和上一步同样的哈希函数映射到环上(如图中橙色节点)。\n  4. 将橙色节点顺时针(其实都是用逆时针感觉也行)找到第一个相遇的蓝色节点，这个橙色对象就存在这个蓝色节点上。\n\n![一致性哈希示意图](/images/201704/一致性哈希示意图.png)\n\n通过这个算法，如果图中在蓝色节点B和蓝色节点C中间加上一个蓝色节点M，那么只有M与B之间的橙色节点由存在C上改变成存在M上，其他未知的橙色节点的存储位置没变，这就是使用一致性哈希的好处。\n\n但是，假设现在把蓝色节点B撤掉，那么原来存在B上的橙色节点全部要转移到C上，假如B上的数据非常多，那么C上就会出现数据过多，也就是热点。也叫数据倾斜。如下图所示。\n\n![删除一个节点后的一致性哈希示意图](/images/201704/删除一个节点后的一致性哈希示意图.png)\n\n## 优化\n\n出现数据倾斜的原因是当B挂了以后，B上的的数据全部转到了C上，如果能让数据被分散的转移到多个机器上，那么问题就解决了。因此出现了虚拟节点的概念。\n\n如下图所示，环上的服务器全部是虚拟节点，A1、A2上的数据实际是在A服务器上存储的，以此类推。这样假如B节点宕机了，那么B1、B2虚拟节点上的数据要转移到它们的下家，也就是D2、A1上，对应的实际服务器也就是D和A，这样就由两台服务器分担B上的数据压力。\n\n![虚拟节点一致性哈希示意图](/images/201704/虚拟节点一致性哈希示意图.png)\n\n\n\n\n\n\n\n\n","source":"_posts/一致性哈希技术.md","raw":"---\ntitle: 一致性哈希技术\ndate: 2017-04-05 20:01:52\ncategories: 算法\ntags:\n\t- 算法\n\t- 哈希\n---\n\n## 概述\n\n在分布式的环境下有这样一个基本场景：比如你有N个缓存服务器做数据缓存，通用方法计算方法是计算object的hash值，然后均匀的映射到N个缓存服务器里，公式是：hash(object) % N。这样的计算方法在理想情况下可以工作的不错，但是现实中往往会改变缓存服务器的数量，那么通过上面这个公式计算出来的缓存映射就全部失效了。\n\n优化上面遇到的问题的方法是使用一致性哈希算法。简单的说，一致性哈希算法要求在移除或添加一个缓存服务器时，它能够尽可能小的改变已存在key映射关系，尽可能的满足单调性的要求。单调性要求是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中，哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。\n\n本文参考的帖子有如下几个:\nhttp://blog.csdn.net/kinger0/article/details/49760751\nhttp://blog.csdn.net/sparkliang/article/details/5279393\n\n## 原理\n\n\n结合下面的一致性哈希示意图，一致性哈希算法的基本步骤如下：\n\n  1. 构造一个空间，想象成环状，例如网上常用的的0 ~ 2^32-1这个空间。\n  2. 将服务器通过哈希函数映射到环上(如图中蓝色节点)，通常使用服务器ip或者服务器名作为hash函数的输入。\n  3. 将对象object通过和上一步同样的哈希函数映射到环上(如图中橙色节点)。\n  4. 将橙色节点顺时针(其实都是用逆时针感觉也行)找到第一个相遇的蓝色节点，这个橙色对象就存在这个蓝色节点上。\n\n![一致性哈希示意图](/images/201704/一致性哈希示意图.png)\n\n通过这个算法，如果图中在蓝色节点B和蓝色节点C中间加上一个蓝色节点M，那么只有M与B之间的橙色节点由存在C上改变成存在M上，其他未知的橙色节点的存储位置没变，这就是使用一致性哈希的好处。\n\n但是，假设现在把蓝色节点B撤掉，那么原来存在B上的橙色节点全部要转移到C上，假如B上的数据非常多，那么C上就会出现数据过多，也就是热点。也叫数据倾斜。如下图所示。\n\n![删除一个节点后的一致性哈希示意图](/images/201704/删除一个节点后的一致性哈希示意图.png)\n\n## 优化\n\n出现数据倾斜的原因是当B挂了以后，B上的的数据全部转到了C上，如果能让数据被分散的转移到多个机器上，那么问题就解决了。因此出现了虚拟节点的概念。\n\n如下图所示，环上的服务器全部是虚拟节点，A1、A2上的数据实际是在A服务器上存储的，以此类推。这样假如B节点宕机了，那么B1、B2虚拟节点上的数据要转移到它们的下家，也就是D2、A1上，对应的实际服务器也就是D和A，这样就由两台服务器分担B上的数据压力。\n\n![虚拟节点一致性哈希示意图](/images/201704/虚拟节点一致性哈希示意图.png)\n\n\n\n\n\n\n\n\n","slug":"一致性哈希技术","published":1,"updated":"2017-04-05T06:37:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd060000i3i783k81puq","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在分布式的环境下有这样一个基本场景：比如你有N个缓存服务器做数据缓存，通用方法计算方法是计算object的hash值，然后均匀的映射到N个缓存服务器里，公式是：hash(object) % N。这样的计算方法在理想情况下可以工作的不错，但是现实中往往会改变缓存服务器的数量，那么通过上面这个公式计算出来的缓存映射就全部失效了。</p>\n<p>优化上面遇到的问题的方法是使用一致性哈希算法。简单的说，一致性哈希算法要求在移除或添加一个缓存服务器时，它能够尽可能小的改变已存在key映射关系，尽可能的满足单调性的要求。单调性要求是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中，哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</p>\n<p>本文参考的帖子有如下几个:<br><a href=\"http://blog.csdn.net/kinger0/article/details/49760751\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/kinger0/article/details/49760751</a><br><a href=\"http://blog.csdn.net/sparkliang/article/details/5279393\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sparkliang/article/details/5279393</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>结合下面的一致性哈希示意图，一致性哈希算法的基本步骤如下：</p>\n<ol>\n<li>构造一个空间，想象成环状，例如网上常用的的0 ~ 2^32-1这个空间。</li>\n<li>将服务器通过哈希函数映射到环上(如图中蓝色节点)，通常使用服务器ip或者服务器名作为hash函数的输入。</li>\n<li>将对象object通过和上一步同样的哈希函数映射到环上(如图中橙色节点)。</li>\n<li>将橙色节点顺时针(其实都是用逆时针感觉也行)找到第一个相遇的蓝色节点，这个橙色对象就存在这个蓝色节点上。</li>\n</ol>\n<p><img src=\"/images/201704/一致性哈希示意图.png\" alt=\"一致性哈希示意图\"></p>\n<p>通过这个算法，如果图中在蓝色节点B和蓝色节点C中间加上一个蓝色节点M，那么只有M与B之间的橙色节点由存在C上改变成存在M上，其他未知的橙色节点的存储位置没变，这就是使用一致性哈希的好处。</p>\n<p>但是，假设现在把蓝色节点B撤掉，那么原来存在B上的橙色节点全部要转移到C上，假如B上的数据非常多，那么C上就会出现数据过多，也就是热点。也叫数据倾斜。如下图所示。</p>\n<p><img src=\"/images/201704/删除一个节点后的一致性哈希示意图.png\" alt=\"删除一个节点后的一致性哈希示意图\"></p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>出现数据倾斜的原因是当B挂了以后，B上的的数据全部转到了C上，如果能让数据被分散的转移到多个机器上，那么问题就解决了。因此出现了虚拟节点的概念。</p>\n<p>如下图所示，环上的服务器全部是虚拟节点，A1、A2上的数据实际是在A服务器上存储的，以此类推。这样假如B节点宕机了，那么B1、B2虚拟节点上的数据要转移到它们的下家，也就是D2、A1上，对应的实际服务器也就是D和A，这样就由两台服务器分担B上的数据压力。</p>\n<p><img src=\"/images/201704/虚拟节点一致性哈希示意图.png\" alt=\"虚拟节点一致性哈希示意图\"></p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在分布式的环境下有这样一个基本场景：比如你有N个缓存服务器做数据缓存，通用方法计算方法是计算object的hash值，然后均匀的映射到N个缓存服务器里，公式是：hash(object) % N。这样的计算方法在理想情况下可以工作的不错，但是现实中往往会改变缓存服务器的数量，那么通过上面这个公式计算出来的缓存映射就全部失效了。</p>\n<p>优化上面遇到的问题的方法是使用一致性哈希算法。简单的说，一致性哈希算法要求在移除或添加一个缓存服务器时，它能够尽可能小的改变已存在key映射关系，尽可能的满足单调性的要求。单调性要求是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中，哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</p>\n<p>本文参考的帖子有如下几个:<br><a href=\"http://blog.csdn.net/kinger0/article/details/49760751\">http://blog.csdn.net/kinger0/article/details/49760751</a><br><a href=\"http://blog.csdn.net/sparkliang/article/details/5279393\">http://blog.csdn.net/sparkliang/article/details/5279393</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>结合下面的一致性哈希示意图，一致性哈希算法的基本步骤如下：</p>\n<ol>\n<li>构造一个空间，想象成环状，例如网上常用的的0 ~ 2^32-1这个空间。</li>\n<li>将服务器通过哈希函数映射到环上(如图中蓝色节点)，通常使用服务器ip或者服务器名作为hash函数的输入。</li>\n<li>将对象object通过和上一步同样的哈希函数映射到环上(如图中橙色节点)。</li>\n<li>将橙色节点顺时针(其实都是用逆时针感觉也行)找到第一个相遇的蓝色节点，这个橙色对象就存在这个蓝色节点上。</li>\n</ol>\n<p><img src=\"/images/201704/一致性哈希示意图.png\" alt=\"一致性哈希示意图\"></p>\n<p>通过这个算法，如果图中在蓝色节点B和蓝色节点C中间加上一个蓝色节点M，那么只有M与B之间的橙色节点由存在C上改变成存在M上，其他未知的橙色节点的存储位置没变，这就是使用一致性哈希的好处。</p>\n<p>但是，假设现在把蓝色节点B撤掉，那么原来存在B上的橙色节点全部要转移到C上，假如B上的数据非常多，那么C上就会出现数据过多，也就是热点。也叫数据倾斜。如下图所示。</p>\n<p><img src=\"/images/201704/删除一个节点后的一致性哈希示意图.png\" alt=\"删除一个节点后的一致性哈希示意图\"></p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>出现数据倾斜的原因是当B挂了以后，B上的的数据全部转到了C上，如果能让数据被分散的转移到多个机器上，那么问题就解决了。因此出现了虚拟节点的概念。</p>\n<p>如下图所示，环上的服务器全部是虚拟节点，A1、A2上的数据实际是在A服务器上存储的，以此类推。这样假如B节点宕机了，那么B1、B2虚拟节点上的数据要转移到它们的下家，也就是D2、A1上，对应的实际服务器也就是D和A，这样就由两台服务器分担B上的数据压力。</p>\n<p><img src=\"/images/201704/虚拟节点一致性哈希示意图.png\" alt=\"虚拟节点一致性哈希示意图\"></p>\n"},{"title":"ConcurrentHashMap的锁分离技术","date":"2017-03-27T14:56:31.000Z","_content":"\n## 前言\n\n互联网公司的技术面试确实很愿意问HashMap，每次问到HashMap又都会问HashMap、HashTable、ConcurrentHashMap的区别。网上介绍三者对比的好贴有很多，笔者记录一下ConcurrentHashMap的锁分离技术，感觉这个技术挺值得学习。\n\n## 锁方式对比\n\nHashTable实现锁的方式是锁整个hash表，而ConcurrentHashMap的实现方式是__锁桶__(简单理解就是将整个Hash表想象成一大缸水，现在将这大缸里的水分到了几个水桶里，hashTable每次都锁定这个大缸，而ConcurrentHashMap则每次只锁定其中一个桶)，如下图所示。\n\n![表锁和桶锁对比图](/images/201703/表锁和桶锁对比图.png)\n\nConcurrentHashMap将hash表分为16个桶(默认值)，诸如get、put、remove等常用操作只锁当前需要用到的桶。试想，原来 只能一个线程进入，现在却能同时16个写线程进入，并发性的提升是显而易见的。\n\n### ConcurrentHashMap的remove操作\n\n值得一提的是当对ConcurrentHashMap进行remove操作时，并不是进行简单的节点删除操作，对比下图，当对ConcurrentHashMap的一个segment也就是一个桶中的节点进行remove后，例如删除节点C，C节点实际并没有被销毁，而是将C节点前面的反转并拷贝到新的链表中，C节点后面的不需要被克隆。这样来保持并发的读线程不受并发的写线程的干扰。例如现在有一个读线程读到了A节点，写线程把C删掉了，但是看上图，读线程仍然可以继续读下去；当然，如果在删除C之前读线程读到的是D，那么更不会有影响。\n\n![ConcurrentHashMap删除操作对比图](/images/201703/ConcurrentHashMap删除操作对比图.png)\n\n根据上面所提到的ConcurrentHashMap中删除一个节点并不会立刻被读线程感受到的效果，就是传说中的弱一致性，所以ConcurrentHashMap的迭代器是弱一致性迭代器\n\n## 总结\n\nConcurrentHashMap综合了HashMap访问速度快和HashTable线程安全的优点，ConcurrentHashMap的设计思想也值得学习。\n","source":"_posts/ConcurrentHashMap的锁分离技术.md","raw":"---\ntitle: ConcurrentHashMap的锁分离技术\ndate: 2017-03-27 22:56:31\ncategories: Java\ntags: \n\t- Java\n\t- ConcurrentHashMap\n---\n\n## 前言\n\n互联网公司的技术面试确实很愿意问HashMap，每次问到HashMap又都会问HashMap、HashTable、ConcurrentHashMap的区别。网上介绍三者对比的好贴有很多，笔者记录一下ConcurrentHashMap的锁分离技术，感觉这个技术挺值得学习。\n\n## 锁方式对比\n\nHashTable实现锁的方式是锁整个hash表，而ConcurrentHashMap的实现方式是__锁桶__(简单理解就是将整个Hash表想象成一大缸水，现在将这大缸里的水分到了几个水桶里，hashTable每次都锁定这个大缸，而ConcurrentHashMap则每次只锁定其中一个桶)，如下图所示。\n\n![表锁和桶锁对比图](/images/201703/表锁和桶锁对比图.png)\n\nConcurrentHashMap将hash表分为16个桶(默认值)，诸如get、put、remove等常用操作只锁当前需要用到的桶。试想，原来 只能一个线程进入，现在却能同时16个写线程进入，并发性的提升是显而易见的。\n\n### ConcurrentHashMap的remove操作\n\n值得一提的是当对ConcurrentHashMap进行remove操作时，并不是进行简单的节点删除操作，对比下图，当对ConcurrentHashMap的一个segment也就是一个桶中的节点进行remove后，例如删除节点C，C节点实际并没有被销毁，而是将C节点前面的反转并拷贝到新的链表中，C节点后面的不需要被克隆。这样来保持并发的读线程不受并发的写线程的干扰。例如现在有一个读线程读到了A节点，写线程把C删掉了，但是看上图，读线程仍然可以继续读下去；当然，如果在删除C之前读线程读到的是D，那么更不会有影响。\n\n![ConcurrentHashMap删除操作对比图](/images/201703/ConcurrentHashMap删除操作对比图.png)\n\n根据上面所提到的ConcurrentHashMap中删除一个节点并不会立刻被读线程感受到的效果，就是传说中的弱一致性，所以ConcurrentHashMap的迭代器是弱一致性迭代器\n\n## 总结\n\nConcurrentHashMap综合了HashMap访问速度快和HashTable线程安全的优点，ConcurrentHashMap的设计思想也值得学习。\n","slug":"ConcurrentHashMap的锁分离技术","published":1,"updated":"2017-03-28T04:05:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0b0002i3i7i7wyfar9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>互联网公司的技术面试确实很愿意问HashMap，每次问到HashMap又都会问HashMap、HashTable、ConcurrentHashMap的区别。网上介绍三者对比的好贴有很多，笔者记录一下ConcurrentHashMap的锁分离技术，感觉这个技术挺值得学习。</p>\n<h2 id=\"锁方式对比\"><a href=\"#锁方式对比\" class=\"headerlink\" title=\"锁方式对比\"></a>锁方式对比</h2><p>HashTable实现锁的方式是锁整个hash表，而ConcurrentHashMap的实现方式是<strong>锁桶</strong>(简单理解就是将整个Hash表想象成一大缸水，现在将这大缸里的水分到了几个水桶里，hashTable每次都锁定这个大缸，而ConcurrentHashMap则每次只锁定其中一个桶)，如下图所示。</p>\n<p><img src=\"/images/201703/表锁和桶锁对比图.png\" alt=\"表锁和桶锁对比图\"></p>\n<p>ConcurrentHashMap将hash表分为16个桶(默认值)，诸如get、put、remove等常用操作只锁当前需要用到的桶。试想，原来 只能一个线程进入，现在却能同时16个写线程进入，并发性的提升是显而易见的。</p>\n<h3 id=\"ConcurrentHashMap的remove操作\"><a href=\"#ConcurrentHashMap的remove操作\" class=\"headerlink\" title=\"ConcurrentHashMap的remove操作\"></a>ConcurrentHashMap的remove操作</h3><p>值得一提的是当对ConcurrentHashMap进行remove操作时，并不是进行简单的节点删除操作，对比下图，当对ConcurrentHashMap的一个segment也就是一个桶中的节点进行remove后，例如删除节点C，C节点实际并没有被销毁，而是将C节点前面的反转并拷贝到新的链表中，C节点后面的不需要被克隆。这样来保持并发的读线程不受并发的写线程的干扰。例如现在有一个读线程读到了A节点，写线程把C删掉了，但是看上图，读线程仍然可以继续读下去；当然，如果在删除C之前读线程读到的是D，那么更不会有影响。</p>\n<p><img src=\"/images/201703/ConcurrentHashMap删除操作对比图.png\" alt=\"ConcurrentHashMap删除操作对比图\"></p>\n<p>根据上面所提到的ConcurrentHashMap中删除一个节点并不会立刻被读线程感受到的效果，就是传说中的弱一致性，所以ConcurrentHashMap的迭代器是弱一致性迭代器</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>ConcurrentHashMap综合了HashMap访问速度快和HashTable线程安全的优点，ConcurrentHashMap的设计思想也值得学习。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>互联网公司的技术面试确实很愿意问HashMap，每次问到HashMap又都会问HashMap、HashTable、ConcurrentHashMap的区别。网上介绍三者对比的好贴有很多，笔者记录一下ConcurrentHashMap的锁分离技术，感觉这个技术挺值得学习。</p>\n<h2 id=\"锁方式对比\"><a href=\"#锁方式对比\" class=\"headerlink\" title=\"锁方式对比\"></a>锁方式对比</h2><p>HashTable实现锁的方式是锁整个hash表，而ConcurrentHashMap的实现方式是<strong>锁桶</strong>(简单理解就是将整个Hash表想象成一大缸水，现在将这大缸里的水分到了几个水桶里，hashTable每次都锁定这个大缸，而ConcurrentHashMap则每次只锁定其中一个桶)，如下图所示。</p>\n<p><img src=\"/images/201703/表锁和桶锁对比图.png\" alt=\"表锁和桶锁对比图\"></p>\n<p>ConcurrentHashMap将hash表分为16个桶(默认值)，诸如get、put、remove等常用操作只锁当前需要用到的桶。试想，原来 只能一个线程进入，现在却能同时16个写线程进入，并发性的提升是显而易见的。</p>\n<h3 id=\"ConcurrentHashMap的remove操作\"><a href=\"#ConcurrentHashMap的remove操作\" class=\"headerlink\" title=\"ConcurrentHashMap的remove操作\"></a>ConcurrentHashMap的remove操作</h3><p>值得一提的是当对ConcurrentHashMap进行remove操作时，并不是进行简单的节点删除操作，对比下图，当对ConcurrentHashMap的一个segment也就是一个桶中的节点进行remove后，例如删除节点C，C节点实际并没有被销毁，而是将C节点前面的反转并拷贝到新的链表中，C节点后面的不需要被克隆。这样来保持并发的读线程不受并发的写线程的干扰。例如现在有一个读线程读到了A节点，写线程把C删掉了，但是看上图，读线程仍然可以继续读下去；当然，如果在删除C之前读线程读到的是D，那么更不会有影响。</p>\n<p><img src=\"/images/201703/ConcurrentHashMap删除操作对比图.png\" alt=\"ConcurrentHashMap删除操作对比图\"></p>\n<p>根据上面所提到的ConcurrentHashMap中删除一个节点并不会立刻被读线程感受到的效果，就是传说中的弱一致性，所以ConcurrentHashMap的迭代器是弱一致性迭代器</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>ConcurrentHashMap综合了HashMap访问速度快和HashTable线程安全的优点，ConcurrentHashMap的设计思想也值得学习。</p>\n"},{"title":"倒排索引技术","date":"2017-04-05T03:16:47.000Z","_content":"\n## 概述\n\n倒排索引是英文Inverted index的翻译，倒排索引并不是A-Z颠倒成Z-A，而应该是反向索引。一般的索引是根据Id找内容，而反向索引是根据内容找Id。\n\n## 原理\n\n关于倒排索引的知识，推荐大家看一下[这本书](https://github.com/jhscpang/books/blob/master/%E8%BF%99%E5%B0%B1%E6%98%AF%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3.pdf)。\n\n","source":"_posts/倒排索引技术.md","raw":"---\ntitle: 倒排索引技术\ndate: 2017-04-05 11:16:47\ncategories: 算法\ntags:\n\t- 算法\n\t- 搜索\n---\n\n## 概述\n\n倒排索引是英文Inverted index的翻译，倒排索引并不是A-Z颠倒成Z-A，而应该是反向索引。一般的索引是根据Id找内容，而反向索引是根据内容找Id。\n\n## 原理\n\n关于倒排索引的知识，推荐大家看一下[这本书](https://github.com/jhscpang/books/blob/master/%E8%BF%99%E5%B0%B1%E6%98%AF%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3.pdf)。\n\n","slug":"倒排索引技术","published":1,"updated":"2017-04-06T11:01:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0g0006i3i7h10ddzf4","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>倒排索引是英文Inverted index的翻译，倒排索引并不是A-Z颠倒成Z-A，而应该是反向索引。一般的索引是根据Id找内容，而反向索引是根据内容找Id。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>关于倒排索引的知识，推荐大家看一下<a href=\"https://github.com/jhscpang/books/blob/master/%E8%BF%99%E5%B0%B1%E6%98%AF%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3.pdf\" target=\"_blank\" rel=\"external\">这本书</a>。</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>倒排索引是英文Inverted index的翻译，倒排索引并不是A-Z颠倒成Z-A，而应该是反向索引。一般的索引是根据Id找内容，而反向索引是根据内容找Id。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>关于倒排索引的知识，推荐大家看一下<a href=\"https://github.com/jhscpang/books/blob/master/%E8%BF%99%E5%B0%B1%E6%98%AF%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3.pdf\">这本书</a>。</p>\n"},{"title":"使用sign签名和token进行服务器端安全校验原理","date":"2017-04-09T08:31:06.000Z","_content":"\n## 概述\n\n参考文章：\nhttp://blog.csdn.net/fengshizty/article/details/48754609\n\n## 原理\n","source":"_posts/使用sign签名和token进行服务器端安全校验原理.md","raw":"---\ntitle: 使用sign签名和token进行服务器端安全校验原理\ndate: 2017-04-09 16:31:06\ntags:\n---\n\n## 概述\n\n参考文章：\nhttp://blog.csdn.net/fengshizty/article/details/48754609\n\n## 原理\n","slug":"使用sign签名和token进行服务器端安全校验原理","published":1,"updated":"2017-04-09T08:34:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0i0007i3i7bqlkt2ak","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>参考文章：<br><a href=\"http://blog.csdn.net/fengshizty/article/details/48754609\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/fengshizty/article/details/48754609</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2>","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>参考文章：<br><a href=\"http://blog.csdn.net/fengshizty/article/details/48754609\">http://blog.csdn.net/fengshizty/article/details/48754609</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2>"},{"title":"最佳股票购买和卖出时间算法","date":"2017-03-27T07:27:45.000Z","_content":"\n## 题目介绍\n\n输入一年365天每天的股票单价，求哪天买入，哪天卖出收益最大？\n\n## 题目分析\n\n__输入__：一个整型的数组\n\n__输出__：一个整型的数组，第0位元素是买入价格，第1位元素是卖出价格，没合适买入和卖出时间则返回[0, 0]\n\n__解题思路__：当卖出的价格减去买入的价格的差最大时，收益最大，因此需要实时计算数组中两个数的最大差，是一个动态规划问题。我们需要一个变量时刻记录最小值，一个变量记录最大的差值，当有比最小值小的数字时，只替换最小值，但是我们不更新结果，因为极小值的改变不代表最大差值就变了。只有在有差值大于当前最大差值时，才更新结果，并更新最大差值。代码实现如下：\n\n\n``` java\npublic class Main {\n\n    private static int[] a = {3, 5, 2, 10, 1, 16}; //输出1，16\n    //private static int[] a = {3,3,3,3,3,3,3,3,3};//输出0 0\n\n    public static void main(String[] args) {\n        int[] result = buyAndSell(a);\n        for (int i = 0; i < result.length; i++) {\n            System.out.println(result[i]);\n        }\n    }\n\n    public static int[] buyAndSell(int[] inputArray) {\n        //输入异常检查\n        if (inputArray == null || inputArray.length < 2) {\n            return null;\n        }\n\n        int minValue = inputArray[0];\n        int maxDiff = 0;\n        int[] result = new int[2];\n        int len = inputArray.length;\n\n        for (int i = 1; i < len; i++) {\n            if (inputArray[i] < minValue) {\n                minValue = inputArray[i];\n            }\n            if (inputArray[i] - minValue > maxDiff) {\n                maxDiff = inputArray[i] - minValue;\n                result[0] = minValue;\n                result[1] = inputArray[i];\n            }\n        }\n\n        return result;\n    }\n}\n```","source":"_posts/最佳股票购买和卖出时间算法.md","raw":"---\ntitle: 最佳股票购买和卖出时间算法\ndate: 2017-03-27 15:27:45\ncategories: 算法\ntags: \n    - 算法\n    - 动态规划\n---\n\n## 题目介绍\n\n输入一年365天每天的股票单价，求哪天买入，哪天卖出收益最大？\n\n## 题目分析\n\n__输入__：一个整型的数组\n\n__输出__：一个整型的数组，第0位元素是买入价格，第1位元素是卖出价格，没合适买入和卖出时间则返回[0, 0]\n\n__解题思路__：当卖出的价格减去买入的价格的差最大时，收益最大，因此需要实时计算数组中两个数的最大差，是一个动态规划问题。我们需要一个变量时刻记录最小值，一个变量记录最大的差值，当有比最小值小的数字时，只替换最小值，但是我们不更新结果，因为极小值的改变不代表最大差值就变了。只有在有差值大于当前最大差值时，才更新结果，并更新最大差值。代码实现如下：\n\n\n``` java\npublic class Main {\n\n    private static int[] a = {3, 5, 2, 10, 1, 16}; //输出1，16\n    //private static int[] a = {3,3,3,3,3,3,3,3,3};//输出0 0\n\n    public static void main(String[] args) {\n        int[] result = buyAndSell(a);\n        for (int i = 0; i < result.length; i++) {\n            System.out.println(result[i]);\n        }\n    }\n\n    public static int[] buyAndSell(int[] inputArray) {\n        //输入异常检查\n        if (inputArray == null || inputArray.length < 2) {\n            return null;\n        }\n\n        int minValue = inputArray[0];\n        int maxDiff = 0;\n        int[] result = new int[2];\n        int len = inputArray.length;\n\n        for (int i = 1; i < len; i++) {\n            if (inputArray[i] < minValue) {\n                minValue = inputArray[i];\n            }\n            if (inputArray[i] - minValue > maxDiff) {\n                maxDiff = inputArray[i] - minValue;\n                result[0] = minValue;\n                result[1] = inputArray[i];\n            }\n        }\n\n        return result;\n    }\n}\n```","slug":"最佳股票购买和卖出时间算法","published":1,"updated":"2017-03-28T03:03:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0l0008i3i7xpknprri","content":"<h2 id=\"题目介绍\"><a href=\"#题目介绍\" class=\"headerlink\" title=\"题目介绍\"></a>题目介绍</h2><p>输入一年365天每天的股票单价，求哪天买入，哪天卖出收益最大？</p>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p><strong>输入</strong>：一个整型的数组</p>\n<p><strong>输出</strong>：一个整型的数组，第0位元素是买入价格，第1位元素是卖出价格，没合适买入和卖出时间则返回[0, 0]</p>\n<p><strong>解题思路</strong>：当卖出的价格减去买入的价格的差最大时，收益最大，因此需要实时计算数组中两个数的最大差，是一个动态规划问题。我们需要一个变量时刻记录最小值，一个变量记录最大的差值，当有比最小值小的数字时，只替换最小值，但是我们不更新结果，因为极小值的改变不代表最大差值就变了。只有在有差值大于当前最大差值时，才更新结果，并更新最大差值。代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] a = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">16</span>&#125;; <span class=\"comment\">//输出1，16</span></div><div class=\"line\">    <span class=\"comment\">//private static int[] a = &#123;3,3,3,3,3,3,3,3,3&#125;;//输出0 0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] result = buyAndSell(a);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.length; i++) &#123;</div><div class=\"line\">            System.out.println(result[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] buyAndSell(<span class=\"keyword\">int</span>[] inputArray) &#123;</div><div class=\"line\">        <span class=\"comment\">//输入异常检查</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (inputArray == <span class=\"keyword\">null</span> || inputArray.length &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> minValue = inputArray[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> maxDiff = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> len = inputArray.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (inputArray[i] &lt; minValue) &#123;</div><div class=\"line\">                minValue = inputArray[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (inputArray[i] - minValue &gt; maxDiff) &#123;</div><div class=\"line\">                maxDiff = inputArray[i] - minValue;</div><div class=\"line\">                result[<span class=\"number\">0</span>] = minValue;</div><div class=\"line\">                result[<span class=\"number\">1</span>] = inputArray[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"题目介绍\"><a href=\"#题目介绍\" class=\"headerlink\" title=\"题目介绍\"></a>题目介绍</h2><p>输入一年365天每天的股票单价，求哪天买入，哪天卖出收益最大？</p>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p><strong>输入</strong>：一个整型的数组</p>\n<p><strong>输出</strong>：一个整型的数组，第0位元素是买入价格，第1位元素是卖出价格，没合适买入和卖出时间则返回[0, 0]</p>\n<p><strong>解题思路</strong>：当卖出的价格减去买入的价格的差最大时，收益最大，因此需要实时计算数组中两个数的最大差，是一个动态规划问题。我们需要一个变量时刻记录最小值，一个变量记录最大的差值，当有比最小值小的数字时，只替换最小值，但是我们不更新结果，因为极小值的改变不代表最大差值就变了。只有在有差值大于当前最大差值时，才更新结果，并更新最大差值。代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] a = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">16</span>&#125;; <span class=\"comment\">//输出1，16</span></div><div class=\"line\">    <span class=\"comment\">//private static int[] a = &#123;3,3,3,3,3,3,3,3,3&#125;;//输出0 0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] result = buyAndSell(a);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.length; i++) &#123;</div><div class=\"line\">            System.out.println(result[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] buyAndSell(<span class=\"keyword\">int</span>[] inputArray) &#123;</div><div class=\"line\">        <span class=\"comment\">//输入异常检查</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (inputArray == <span class=\"keyword\">null</span> || inputArray.length &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> minValue = inputArray[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> maxDiff = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> len = inputArray.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (inputArray[i] &lt; minValue) &#123;</div><div class=\"line\">                minValue = inputArray[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (inputArray[i] - minValue &gt; maxDiff) &#123;</div><div class=\"line\">                maxDiff = inputArray[i] - minValue;</div><div class=\"line\">                result[<span class=\"number\">0</span>] = minValue;</div><div class=\"line\">                result[<span class=\"number\">1</span>] = inputArray[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"自动生成参考文献技巧","date":"2017-03-29T05:13:49.000Z","_content":"\n## 需求\n\n在毕业季忙于写论文时，参考文献的协作很让人头疼，现在需要一种自动生成参考文件格式的方法。\n\n## 解决办法\n\n作者在网上找到了一个自动生成参考文献的好办法，见[这个帖子](http://jingyan.baidu.com/article/c35dbcb0cb2a228917fcbc40.html)。\n\n步骤如下：\n\n(1). 打开中国知网网站\n\n![第一步](/images/201703/参考文献第一步.png)\n\n(2). 在搜索框输入论文的关键字，类别选参考文献\n\n![第二步](/images/201703/参考文献第二步.png)\n\n(3). 选择觉得合适的文章，点击导出/参考文献\n\n![第三步](/images/201703/参考文献第三步.png)\n\n(4). 收获成果\n\n![第四步](/images/201703/参考文献第四步.png)","source":"_posts/自动生成参考文献技巧.md","raw":"---\ntitle: 自动生成参考文献技巧\ndate: 2017-03-29 13:13:49\ncategories: 写作技巧\ntags: \n    - 论文\n---\n\n## 需求\n\n在毕业季忙于写论文时，参考文献的协作很让人头疼，现在需要一种自动生成参考文件格式的方法。\n\n## 解决办法\n\n作者在网上找到了一个自动生成参考文献的好办法，见[这个帖子](http://jingyan.baidu.com/article/c35dbcb0cb2a228917fcbc40.html)。\n\n步骤如下：\n\n(1). 打开中国知网网站\n\n![第一步](/images/201703/参考文献第一步.png)\n\n(2). 在搜索框输入论文的关键字，类别选参考文献\n\n![第二步](/images/201703/参考文献第二步.png)\n\n(3). 选择觉得合适的文章，点击导出/参考文献\n\n![第三步](/images/201703/参考文献第三步.png)\n\n(4). 收获成果\n\n![第四步](/images/201703/参考文献第四步.png)","slug":"自动生成参考文献技巧","published":1,"updated":"2017-03-29T05:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0p000bi3i7r1e0ex0w","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>在毕业季忙于写论文时，参考文献的协作很让人头疼，现在需要一种自动生成参考文件格式的方法。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>作者在网上找到了一个自动生成参考文献的好办法，见<a href=\"http://jingyan.baidu.com/article/c35dbcb0cb2a228917fcbc40.html\" target=\"_blank\" rel=\"external\">这个帖子</a>。</p>\n<p>步骤如下：</p>\n<p>(1). 打开中国知网网站</p>\n<p><img src=\"/images/201703/参考文献第一步.png\" alt=\"第一步\"></p>\n<p>(2). 在搜索框输入论文的关键字，类别选参考文献</p>\n<p><img src=\"/images/201703/参考文献第二步.png\" alt=\"第二步\"></p>\n<p>(3). 选择觉得合适的文章，点击导出/参考文献</p>\n<p><img src=\"/images/201703/参考文献第三步.png\" alt=\"第三步\"></p>\n<p>(4). 收获成果</p>\n<p><img src=\"/images/201703/参考文献第四步.png\" alt=\"第四步\"></p>\n","excerpt":"","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>在毕业季忙于写论文时，参考文献的协作很让人头疼，现在需要一种自动生成参考文件格式的方法。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>作者在网上找到了一个自动生成参考文献的好办法，见<a href=\"http://jingyan.baidu.com/article/c35dbcb0cb2a228917fcbc40.html\">这个帖子</a>。</p>\n<p>步骤如下：</p>\n<p>(1). 打开中国知网网站</p>\n<p><img src=\"/images/201703/参考文献第一步.png\" alt=\"第一步\"></p>\n<p>(2). 在搜索框输入论文的关键字，类别选参考文献</p>\n<p><img src=\"/images/201703/参考文献第二步.png\" alt=\"第二步\"></p>\n<p>(3). 选择觉得合适的文章，点击导出/参考文献</p>\n<p><img src=\"/images/201703/参考文献第三步.png\" alt=\"第三步\"></p>\n<p>(4). 收获成果</p>\n<p><img src=\"/images/201703/参考文献第四步.png\" alt=\"第四步\"></p>\n"},{"title":"网站扫码登陆原理","date":"2017-04-03T07:01:58.000Z","_content":"\n## 简介\n\n随着二维码应用的普及，越来越多的网站加入了扫码网站上的二维码进行网站登陆的功能。典型的应用是微信网页版，打开微信网页版，用手机微信扫码网站上的二维码，然后确认登陆，不需要输入用户名和密码即可完成微信网页版的登陆。\n\n出于好奇，作者查找了一些关于扫码登陆的资料，做了一下总结分享出来。其中参考的帖子有如下几个：\nhttp://www.jianshu.com/p/7f072ac61763\nhttps://www.zhihu.com/question/22991085\n\n## 原理\n\n![扫码登陆示意图](/images/201704/扫码登陆示意图.png)\n\n如上图所示，臆想现在的情景是在进行微信网页端扫码登陆，那么交互的过程分如下几步：\n\n  1. 打开微信网页端，服务器会给页面发送一个二维码，二维码里存储的信息实际上就是一个字符串，而微信扫码登陆时二维码解析成字符串是类似这样的：https://login.weixin.qq.com/l/ga9bMbfOGw== 。其中ga9bMbfOGw==是服务器为此次请求生成的唯一标示UUID，并且进行了加密后的样子。（读者可以打开微信网页版，然后把二维码截图，放在[这个二维码解码器工具](http://jiema.wwei.cn/)里查看一下UUID）\n\n  2. 手机扫码二维码，然后解析二维码，能获取到UUID。\n\n  3. 客户端将用户在客户端登陆的信息和UUID同时传给服务器。\n\n  4. 服务器得到UUID和用户信息后，将两者生成登陆签名，然后服务器给浏览器发送一个状态码通知浏览器UUID和用户信息已经绑定了，但是并不给浏览器发登陆签名，浏览器此时显示等待客户端确认登陆。\n\n  5. 客户端点击确认登陆，将用户信息再次传给服务器。\n\n  6. 服务器根据用户信息可以找到登陆签名。发给浏览器完成登陆。\n\n值得一提的是，浏览器和服务器在整个过程中一般使用长连接。并且在浏览器等待客户端扫码时，浏览器会定期轮询给服务器发请求问UUID和用户信息绑定上没，一旦绑定上，服务器端立刻返回结果，如果没绑定上，服务器暂时阻塞，阻塞到一定时间，服务器会给浏览器发一个状态码告诉它没绑定。\n\n\n  ","source":"_posts/网站扫码登陆原理.md","raw":"---\ntitle: 网站扫码登陆原理\ndate: 2017-04-03 15:01:58\ncategories: Web开发\ntags: \n    - 二维码\n---\n\n## 简介\n\n随着二维码应用的普及，越来越多的网站加入了扫码网站上的二维码进行网站登陆的功能。典型的应用是微信网页版，打开微信网页版，用手机微信扫码网站上的二维码，然后确认登陆，不需要输入用户名和密码即可完成微信网页版的登陆。\n\n出于好奇，作者查找了一些关于扫码登陆的资料，做了一下总结分享出来。其中参考的帖子有如下几个：\nhttp://www.jianshu.com/p/7f072ac61763\nhttps://www.zhihu.com/question/22991085\n\n## 原理\n\n![扫码登陆示意图](/images/201704/扫码登陆示意图.png)\n\n如上图所示，臆想现在的情景是在进行微信网页端扫码登陆，那么交互的过程分如下几步：\n\n  1. 打开微信网页端，服务器会给页面发送一个二维码，二维码里存储的信息实际上就是一个字符串，而微信扫码登陆时二维码解析成字符串是类似这样的：https://login.weixin.qq.com/l/ga9bMbfOGw== 。其中ga9bMbfOGw==是服务器为此次请求生成的唯一标示UUID，并且进行了加密后的样子。（读者可以打开微信网页版，然后把二维码截图，放在[这个二维码解码器工具](http://jiema.wwei.cn/)里查看一下UUID）\n\n  2. 手机扫码二维码，然后解析二维码，能获取到UUID。\n\n  3. 客户端将用户在客户端登陆的信息和UUID同时传给服务器。\n\n  4. 服务器得到UUID和用户信息后，将两者生成登陆签名，然后服务器给浏览器发送一个状态码通知浏览器UUID和用户信息已经绑定了，但是并不给浏览器发登陆签名，浏览器此时显示等待客户端确认登陆。\n\n  5. 客户端点击确认登陆，将用户信息再次传给服务器。\n\n  6. 服务器根据用户信息可以找到登陆签名。发给浏览器完成登陆。\n\n值得一提的是，浏览器和服务器在整个过程中一般使用长连接。并且在浏览器等待客户端扫码时，浏览器会定期轮询给服务器发请求问UUID和用户信息绑定上没，一旦绑定上，服务器端立刻返回结果，如果没绑定上，服务器暂时阻塞，阻塞到一定时间，服务器会给浏览器发一个状态码告诉它没绑定。\n\n\n  ","slug":"网站扫码登陆原理","published":1,"updated":"2017-04-03T08:02:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0r000di3i7vsnb0351","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>随着二维码应用的普及，越来越多的网站加入了扫码网站上的二维码进行网站登陆的功能。典型的应用是微信网页版，打开微信网页版，用手机微信扫码网站上的二维码，然后确认登陆，不需要输入用户名和密码即可完成微信网页版的登陆。</p>\n<p>出于好奇，作者查找了一些关于扫码登陆的资料，做了一下总结分享出来。其中参考的帖子有如下几个：<br><a href=\"http://www.jianshu.com/p/7f072ac61763\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/7f072ac61763</a><br><a href=\"https://www.zhihu.com/question/22991085\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/22991085</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><img src=\"/images/201704/扫码登陆示意图.png\" alt=\"扫码登陆示意图\"></p>\n<p>如上图所示，臆想现在的情景是在进行微信网页端扫码登陆，那么交互的过程分如下几步：</p>\n<ol>\n<li><p>打开微信网页端，服务器会给页面发送一个二维码，二维码里存储的信息实际上就是一个字符串，而微信扫码登陆时二维码解析成字符串是类似这样的：<a href=\"https://login.weixin.qq.com/l/ga9bMbfOGw==\" target=\"_blank\" rel=\"external\">https://login.weixin.qq.com/l/ga9bMbfOGw==</a> 。其中ga9bMbfOGw==是服务器为此次请求生成的唯一标示UUID，并且进行了加密后的样子。（读者可以打开微信网页版，然后把二维码截图，放在<a href=\"http://jiema.wwei.cn/\" target=\"_blank\" rel=\"external\">这个二维码解码器工具</a>里查看一下UUID）</p>\n</li>\n<li><p>手机扫码二维码，然后解析二维码，能获取到UUID。</p>\n</li>\n<li><p>客户端将用户在客户端登陆的信息和UUID同时传给服务器。</p>\n</li>\n<li><p>服务器得到UUID和用户信息后，将两者生成登陆签名，然后服务器给浏览器发送一个状态码通知浏览器UUID和用户信息已经绑定了，但是并不给浏览器发登陆签名，浏览器此时显示等待客户端确认登陆。</p>\n</li>\n<li><p>客户端点击确认登陆，将用户信息再次传给服务器。</p>\n</li>\n<li><p>服务器根据用户信息可以找到登陆签名。发给浏览器完成登陆。</p>\n</li>\n</ol>\n<p>值得一提的是，浏览器和服务器在整个过程中一般使用长连接。并且在浏览器等待客户端扫码时，浏览器会定期轮询给服务器发请求问UUID和用户信息绑定上没，一旦绑定上，服务器端立刻返回结果，如果没绑定上，服务器暂时阻塞，阻塞到一定时间，服务器会给浏览器发一个状态码告诉它没绑定。</p>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>随着二维码应用的普及，越来越多的网站加入了扫码网站上的二维码进行网站登陆的功能。典型的应用是微信网页版，打开微信网页版，用手机微信扫码网站上的二维码，然后确认登陆，不需要输入用户名和密码即可完成微信网页版的登陆。</p>\n<p>出于好奇，作者查找了一些关于扫码登陆的资料，做了一下总结分享出来。其中参考的帖子有如下几个：<br><a href=\"http://www.jianshu.com/p/7f072ac61763\">http://www.jianshu.com/p/7f072ac61763</a><br><a href=\"https://www.zhihu.com/question/22991085\">https://www.zhihu.com/question/22991085</a></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><img src=\"/images/201704/扫码登陆示意图.png\" alt=\"扫码登陆示意图\"></p>\n<p>如上图所示，臆想现在的情景是在进行微信网页端扫码登陆，那么交互的过程分如下几步：</p>\n<ol>\n<li><p>打开微信网页端，服务器会给页面发送一个二维码，二维码里存储的信息实际上就是一个字符串，而微信扫码登陆时二维码解析成字符串是类似这样的：<a href=\"https://login.weixin.qq.com/l/ga9bMbfOGw==\">https://login.weixin.qq.com/l/ga9bMbfOGw==</a> 。其中ga9bMbfOGw==是服务器为此次请求生成的唯一标示UUID，并且进行了加密后的样子。（读者可以打开微信网页版，然后把二维码截图，放在<a href=\"http://jiema.wwei.cn/\">这个二维码解码器工具</a>里查看一下UUID）</p>\n</li>\n<li><p>手机扫码二维码，然后解析二维码，能获取到UUID。</p>\n</li>\n<li><p>客户端将用户在客户端登陆的信息和UUID同时传给服务器。</p>\n</li>\n<li><p>服务器得到UUID和用户信息后，将两者生成登陆签名，然后服务器给浏览器发送一个状态码通知浏览器UUID和用户信息已经绑定了，但是并不给浏览器发登陆签名，浏览器此时显示等待客户端确认登陆。</p>\n</li>\n<li><p>客户端点击确认登陆，将用户信息再次传给服务器。</p>\n</li>\n<li><p>服务器根据用户信息可以找到登陆签名。发给浏览器完成登陆。</p>\n</li>\n</ol>\n<p>值得一提的是，浏览器和服务器在整个过程中一般使用长连接。并且在浏览器等待客户端扫码时，浏览器会定期轮询给服务器发请求问UUID和用户信息绑定上没，一旦绑定上，服务器端立刻返回结果，如果没绑定上，服务器暂时阻塞，阻塞到一定时间，服务器会给浏览器发一个状态码告诉它没绑定。</p>\n"},{"title":"设计模式之命令模式","date":"2017-04-02T08:59:07.000Z","_content":"\n## 概述\n\n如下图所示，从商场买回来的开关，经过不同的电线进行连接，有的可以控制电灯，有的可以控制电扇，但是在商场买的时候，并不知道这个开关将来被用来控制什么。 这里的开关好比请求发送者，电灯和电扇好比请求接收者，请求发送者和接收者通过电线连接，而不是将开关和电灯直接焊在一起，这就是请求发送者和请求接收者解耦。通过电线可以随意的切换开关与其他电器的连接，这就是命令模式。\n\n![开关灯泡电风扇示意图](/images/201704/开关灯泡电风扇示意图.png)\n\n在命令模式中，发送者与接收者之间引入了新的命令对象(类似上图中的电线）将发送者的请求封装在命令对象中，再通过命令对象来调用接收者的方法。\n\n命令模式(Command Pattern)是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。\n\n## 设计\n\n命令模式的核心在于引入了命令类，通过命令类来降低发送者和接收者的耦合度，请求发送者只需指定一个命令对象，再通过命令对象来调用请求接收者的处理方法，其结构如下图所示。\n\n![命令模式类结构图](/images/201704/命令模式类结构图.png)\n\n命令模式有如下几个角色：\n\n  * Command(抽象命令类): 抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作。  \n\n  * ConcreteCommand(具体命令类): 是抽象命令类的子类，持有对应的请求接收者的引用，在实现execute()方 法时，将调用接收者对象的相关操作(Action)。\n\n  * Invoker(调用者): 即请求发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，只需持有抽象命令类的引用，在程序运行时将一个具体命令对象注入其中，进而依靠多态特性实现实际调用具体命令对象的execute()方法，间接与请求接收者交互。\n\n  * Receiver(接收者):接收者执行与请求相关的操作，它具体实现对请求的业务处理。\n\n命令模式的关键在于引入了抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象命令类的具体命令才与请求接收者相关联。\n\n## 实现\n\n__Command类__\n\n``` java\npublic interface Command {\n\n    public void execute();\n}\n```\n\n__ConcreteCommand类__\n\n``` java\npublic class ConcreteCommand implements Command {\n\n    private Receiver receiver;\n\n    public ConcreteCommand(Receiver receiver) {\n        this.receiver = receiver;\n    }\n\n    public void execute() {\n        receiver.action();\n    }\n}\n```\n\n__Invoke类__\n\n``` java\npublic class Invoke {\n\n    private Command command;\n\n    //构造器注入\n    public Invoke(Command command) {\n        this.command = command;\n    }\n\n    public Invoke() {\n    }\n\n    //业务方法，用于调用命令类的execute()方法\n    public void call() {\n        command.execute();\n    }\n\n    public Command getCommand() {\n        return command;\n    }\n\n    //set方法注入\n    public void setCommand(Command command) {\n        this.command = command;\n    }\n}\n```\n__Receiver类__\n\n``` java\npublic class Receiver {\n\n    public void action() {\n        System.out.println(\"Receiver execute action...\");\n    }\n}\n```\n__Client类__\n\n``` java\npublic class Client {\n\n    public static void main(String[] args) {\n\n        Receiver receiver = new Receiver();\n        //构造器注入\n        Command command = new ConcreteCommand(receiver);\n        //set方法注入\n        Invoke invoke = new Invoke();\n        invoke.setCommand(command);\n\n        invoke.call();\n    }\n}\n```\n\n## 总结\n\n上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/command)可以下载。关于命令模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中命令模式小节。","source":"_posts/设计模式之命令模式.md","raw":"---\ntitle: 设计模式之命令模式\ndate: 2017-04-02 16:59:07\ncategories: 设计模式\ntags: \n    - 设计模式\n    - 行为型模式\n---\n\n## 概述\n\n如下图所示，从商场买回来的开关，经过不同的电线进行连接，有的可以控制电灯，有的可以控制电扇，但是在商场买的时候，并不知道这个开关将来被用来控制什么。 这里的开关好比请求发送者，电灯和电扇好比请求接收者，请求发送者和接收者通过电线连接，而不是将开关和电灯直接焊在一起，这就是请求发送者和请求接收者解耦。通过电线可以随意的切换开关与其他电器的连接，这就是命令模式。\n\n![开关灯泡电风扇示意图](/images/201704/开关灯泡电风扇示意图.png)\n\n在命令模式中，发送者与接收者之间引入了新的命令对象(类似上图中的电线）将发送者的请求封装在命令对象中，再通过命令对象来调用接收者的方法。\n\n命令模式(Command Pattern)是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。\n\n## 设计\n\n命令模式的核心在于引入了命令类，通过命令类来降低发送者和接收者的耦合度，请求发送者只需指定一个命令对象，再通过命令对象来调用请求接收者的处理方法，其结构如下图所示。\n\n![命令模式类结构图](/images/201704/命令模式类结构图.png)\n\n命令模式有如下几个角色：\n\n  * Command(抽象命令类): 抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作。  \n\n  * ConcreteCommand(具体命令类): 是抽象命令类的子类，持有对应的请求接收者的引用，在实现execute()方 法时，将调用接收者对象的相关操作(Action)。\n\n  * Invoker(调用者): 即请求发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，只需持有抽象命令类的引用，在程序运行时将一个具体命令对象注入其中，进而依靠多态特性实现实际调用具体命令对象的execute()方法，间接与请求接收者交互。\n\n  * Receiver(接收者):接收者执行与请求相关的操作，它具体实现对请求的业务处理。\n\n命令模式的关键在于引入了抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象命令类的具体命令才与请求接收者相关联。\n\n## 实现\n\n__Command类__\n\n``` java\npublic interface Command {\n\n    public void execute();\n}\n```\n\n__ConcreteCommand类__\n\n``` java\npublic class ConcreteCommand implements Command {\n\n    private Receiver receiver;\n\n    public ConcreteCommand(Receiver receiver) {\n        this.receiver = receiver;\n    }\n\n    public void execute() {\n        receiver.action();\n    }\n}\n```\n\n__Invoke类__\n\n``` java\npublic class Invoke {\n\n    private Command command;\n\n    //构造器注入\n    public Invoke(Command command) {\n        this.command = command;\n    }\n\n    public Invoke() {\n    }\n\n    //业务方法，用于调用命令类的execute()方法\n    public void call() {\n        command.execute();\n    }\n\n    public Command getCommand() {\n        return command;\n    }\n\n    //set方法注入\n    public void setCommand(Command command) {\n        this.command = command;\n    }\n}\n```\n__Receiver类__\n\n``` java\npublic class Receiver {\n\n    public void action() {\n        System.out.println(\"Receiver execute action...\");\n    }\n}\n```\n__Client类__\n\n``` java\npublic class Client {\n\n    public static void main(String[] args) {\n\n        Receiver receiver = new Receiver();\n        //构造器注入\n        Command command = new ConcreteCommand(receiver);\n        //set方法注入\n        Invoke invoke = new Invoke();\n        invoke.setCommand(command);\n\n        invoke.call();\n    }\n}\n```\n\n## 总结\n\n上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/command)可以下载。关于命令模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中命令模式小节。","slug":"设计模式之命令模式","published":1,"updated":"2017-04-03T12:15:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0t000hi3i7a02142kc","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>如下图所示，从商场买回来的开关，经过不同的电线进行连接，有的可以控制电灯，有的可以控制电扇，但是在商场买的时候，并不知道这个开关将来被用来控制什么。 这里的开关好比请求发送者，电灯和电扇好比请求接收者，请求发送者和接收者通过电线连接，而不是将开关和电灯直接焊在一起，这就是请求发送者和请求接收者解耦。通过电线可以随意的切换开关与其他电器的连接，这就是命令模式。</p>\n<p><img src=\"/images/201704/开关灯泡电风扇示意图.png\" alt=\"开关灯泡电风扇示意图\"></p>\n<p>在命令模式中，发送者与接收者之间引入了新的命令对象(类似上图中的电线）将发送者的请求封装在命令对象中，再通过命令对象来调用接收者的方法。</p>\n<p>命令模式(Command Pattern)是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>命令模式的核心在于引入了命令类，通过命令类来降低发送者和接收者的耦合度，请求发送者只需指定一个命令对象，再通过命令对象来调用请求接收者的处理方法，其结构如下图所示。</p>\n<p><img src=\"/images/201704/命令模式类结构图.png\" alt=\"命令模式类结构图\"></p>\n<p>命令模式有如下几个角色：</p>\n<ul>\n<li><p>Command(抽象命令类): 抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作。  </p>\n</li>\n<li><p>ConcreteCommand(具体命令类): 是抽象命令类的子类，持有对应的请求接收者的引用，在实现execute()方 法时，将调用接收者对象的相关操作(Action)。</p>\n</li>\n<li><p>Invoker(调用者): 即请求发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，只需持有抽象命令类的引用，在程序运行时将一个具体命令对象注入其中，进而依靠多态特性实现实际调用具体命令对象的execute()方法，间接与请求接收者交互。</p>\n</li>\n<li><p>Receiver(接收者):接收者执行与请求相关的操作，它具体实现对请求的业务处理。</p>\n</li>\n</ul>\n<p>命令模式的关键在于引入了抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象命令类的具体命令才与请求接收者相关联。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><strong>Command类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ConcreteCommand类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Receiver receiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteCommand</span><span class=\"params\">(Receiver receiver)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        receiver.action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Invoke类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoke</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Command command;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造器注入</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoke</span><span class=\"params\">(Command command)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoke</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//业务方法，用于调用命令类的execute()方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        command.execute();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Command <span class=\"title\">getCommand</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set方法注入</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCommand</span><span class=\"params\">(Command command)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Receiver类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Receiver execute action...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Client类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Receiver receiver = <span class=\"keyword\">new</span> Receiver();</div><div class=\"line\">        <span class=\"comment\">//构造器注入</span></div><div class=\"line\">        Command command = <span class=\"keyword\">new</span> ConcreteCommand(receiver);</div><div class=\"line\">        <span class=\"comment\">//set方法注入</span></div><div class=\"line\">        Invoke invoke = <span class=\"keyword\">new</span> Invoke();</div><div class=\"line\">        invoke.setCommand(command);</div><div class=\"line\"></div><div class=\"line\">        invoke.call();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/command\" target=\"_blank\" rel=\"external\">这个地址</a>可以下载。关于命令模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\" target=\"_blank\" rel=\"external\">这本书</a>中命令模式小节。</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>如下图所示，从商场买回来的开关，经过不同的电线进行连接，有的可以控制电灯，有的可以控制电扇，但是在商场买的时候，并不知道这个开关将来被用来控制什么。 这里的开关好比请求发送者，电灯和电扇好比请求接收者，请求发送者和接收者通过电线连接，而不是将开关和电灯直接焊在一起，这就是请求发送者和请求接收者解耦。通过电线可以随意的切换开关与其他电器的连接，这就是命令模式。</p>\n<p><img src=\"/images/201704/开关灯泡电风扇示意图.png\" alt=\"开关灯泡电风扇示意图\"></p>\n<p>在命令模式中，发送者与接收者之间引入了新的命令对象(类似上图中的电线）将发送者的请求封装在命令对象中，再通过命令对象来调用接收者的方法。</p>\n<p>命令模式(Command Pattern)是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>命令模式的核心在于引入了命令类，通过命令类来降低发送者和接收者的耦合度，请求发送者只需指定一个命令对象，再通过命令对象来调用请求接收者的处理方法，其结构如下图所示。</p>\n<p><img src=\"/images/201704/命令模式类结构图.png\" alt=\"命令模式类结构图\"></p>\n<p>命令模式有如下几个角色：</p>\n<ul>\n<li><p>Command(抽象命令类): 抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作。  </p>\n</li>\n<li><p>ConcreteCommand(具体命令类): 是抽象命令类的子类，持有对应的请求接收者的引用，在实现execute()方 法时，将调用接收者对象的相关操作(Action)。</p>\n</li>\n<li><p>Invoker(调用者): 即请求发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，只需持有抽象命令类的引用，在程序运行时将一个具体命令对象注入其中，进而依靠多态特性实现实际调用具体命令对象的execute()方法，间接与请求接收者交互。</p>\n</li>\n<li><p>Receiver(接收者):接收者执行与请求相关的操作，它具体实现对请求的业务处理。</p>\n</li>\n</ul>\n<p>命令模式的关键在于引入了抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象命令类的具体命令才与请求接收者相关联。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><strong>Command类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ConcreteCommand类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Receiver receiver;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteCommand</span><span class=\"params\">(Receiver receiver)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        receiver.action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Invoke类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoke</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Command command;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造器注入</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoke</span><span class=\"params\">(Command command)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoke</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//业务方法，用于调用命令类的execute()方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        command.execute();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Command <span class=\"title\">getCommand</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set方法注入</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCommand</span><span class=\"params\">(Command command)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Receiver类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Receiver execute action...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Client类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Receiver receiver = <span class=\"keyword\">new</span> Receiver();</div><div class=\"line\">        <span class=\"comment\">//构造器注入</span></div><div class=\"line\">        Command command = <span class=\"keyword\">new</span> ConcreteCommand(receiver);</div><div class=\"line\">        <span class=\"comment\">//set方法注入</span></div><div class=\"line\">        Invoke invoke = <span class=\"keyword\">new</span> Invoke();</div><div class=\"line\">        invoke.setCommand(command);</div><div class=\"line\"></div><div class=\"line\">        invoke.call();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/command\">这个地址</a>可以下载。关于命令模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\">这本书</a>中命令模式小节。</p>\n"},{"title":"设计模式之备忘录模式","date":"2017-04-05T12:00:45.000Z","_content":"","source":"_posts/设计模式之备忘录模式.md","raw":"---\ntitle: 设计模式之备忘录模式\ndate: 2017-04-05 20:00:45\ntags:\n---\n","slug":"设计模式之备忘录模式","published":1,"updated":"2017-04-05T03:16:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0v000ji3i7x8asfdzm","content":"","excerpt":"","more":""},{"title":"设计模式之模板方法模式","date":"2017-03-28T07:06:50.000Z","_content":"\n## 概述\n\n模板方法模式是定义一个操作中算法的框架，而将一些步骤延迟到子类中。例如：把大象装进冰箱分三步：\n  1. 把冰箱门打开\n  2. 把大象放进去\n  3. 把冰箱门关上\n那么张三可能是把大象横着放进冰箱的，而李四可能是把大象竖着放进冰箱的。不管怎么放的，步骤都是上面那三步。这时候可以将以上三步的顺序确定下来，然后将共同的第一步和第三步的实现放在父类里，父类只做第二步的声明，子类通过重写方法的方式实现自己的第二步玩法。这样不管子类怎么花样放大象，基本的三步都不会被改变。\n\n## 设计\n\n![模板方法模式类结构图](/images/201703/模板方法模式类结构图.png)\n\n如上图所示，模板方法模式一般有两个角色，一个是父类，父类里面定义基本的执行步骤，这里指AbstractClass里的templateMethod()方法定义了方法执行的步骤是先开冰箱门、再放大象进去、再关上冰箱门。另一个是子类，子类重写父类的方法，实现某些步骤的个性化定制，这里指ConcreteClass重写父类的putInElephant()方法实现自己想要的放大象进冰箱的方式。\n\n模板方法模式中还有一个名词叫钩子方法，钩子方法的作用是想让子类控制父类的行为。例如给上面放大象的方法执行限制一个条件，只有在大象感觉热的时候才把大象放进去，不然不放。那么这个限制条件抽取出来作为一个返回值为Boolean的方法，这个方法就是钩子方法。通过子类重写钩子方法的返回值，可以决定放不放大象进冰箱，这就是通过子类控制父类的行为。\n\n## 实现\n\n下面是带钩子方法的模板方法设计模式实现。\n\n__AbstractClass类__\n\n``` java\npublic abstract class AbstractClass {\n\n    //开冰箱门\n    public void openFridge() {\n        System.out.println(\"把冰箱门打开...\");\n    }\n\n    //把对象放进冰箱\n    public abstract void putInElephant();\n\n    //关冰箱门\n    public void closeFridge() {\n        System.out.println(\"把冰箱门关上...\");\n    }\n\n    //钩子方法\n    public boolean isHot() {\n        return false;\n    }\n\n    //模板方法\n    public void templateMethod() {\n        //制定执行步骤\n        openFridge();\n        if (isHot()) {\n            putInElephant();\n        }\n        closeFridge();\n    }\n\n}\n```\n\n__ConcreteClass类__\n\n``` java\npublic class ConcreteClass extends AbstractClass {\n\n    @Override\n    public void putInElephant() {\n        System.out.println(\"把大象横着放进去...\");\n    }\n\n    @Override\n    public boolean isHot() {\n        return true;\n    }\n}\n```\n\n## 总结\n\n模板方法模式比较好理解，并且也很常用。上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/template)可以下载。关于模板方法模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中模板方法模式小节。\n","source":"_posts/设计模式之模板方法模式.md","raw":"---\ntitle: 设计模式之模板方法模式\ndate: 2017-03-28 15:06:50\ncategories: 设计模式\ntags: \n    - 设计模式\n    - 行为型模式\n---\n\n## 概述\n\n模板方法模式是定义一个操作中算法的框架，而将一些步骤延迟到子类中。例如：把大象装进冰箱分三步：\n  1. 把冰箱门打开\n  2. 把大象放进去\n  3. 把冰箱门关上\n那么张三可能是把大象横着放进冰箱的，而李四可能是把大象竖着放进冰箱的。不管怎么放的，步骤都是上面那三步。这时候可以将以上三步的顺序确定下来，然后将共同的第一步和第三步的实现放在父类里，父类只做第二步的声明，子类通过重写方法的方式实现自己的第二步玩法。这样不管子类怎么花样放大象，基本的三步都不会被改变。\n\n## 设计\n\n![模板方法模式类结构图](/images/201703/模板方法模式类结构图.png)\n\n如上图所示，模板方法模式一般有两个角色，一个是父类，父类里面定义基本的执行步骤，这里指AbstractClass里的templateMethod()方法定义了方法执行的步骤是先开冰箱门、再放大象进去、再关上冰箱门。另一个是子类，子类重写父类的方法，实现某些步骤的个性化定制，这里指ConcreteClass重写父类的putInElephant()方法实现自己想要的放大象进冰箱的方式。\n\n模板方法模式中还有一个名词叫钩子方法，钩子方法的作用是想让子类控制父类的行为。例如给上面放大象的方法执行限制一个条件，只有在大象感觉热的时候才把大象放进去，不然不放。那么这个限制条件抽取出来作为一个返回值为Boolean的方法，这个方法就是钩子方法。通过子类重写钩子方法的返回值，可以决定放不放大象进冰箱，这就是通过子类控制父类的行为。\n\n## 实现\n\n下面是带钩子方法的模板方法设计模式实现。\n\n__AbstractClass类__\n\n``` java\npublic abstract class AbstractClass {\n\n    //开冰箱门\n    public void openFridge() {\n        System.out.println(\"把冰箱门打开...\");\n    }\n\n    //把对象放进冰箱\n    public abstract void putInElephant();\n\n    //关冰箱门\n    public void closeFridge() {\n        System.out.println(\"把冰箱门关上...\");\n    }\n\n    //钩子方法\n    public boolean isHot() {\n        return false;\n    }\n\n    //模板方法\n    public void templateMethod() {\n        //制定执行步骤\n        openFridge();\n        if (isHot()) {\n            putInElephant();\n        }\n        closeFridge();\n    }\n\n}\n```\n\n__ConcreteClass类__\n\n``` java\npublic class ConcreteClass extends AbstractClass {\n\n    @Override\n    public void putInElephant() {\n        System.out.println(\"把大象横着放进去...\");\n    }\n\n    @Override\n    public boolean isHot() {\n        return true;\n    }\n}\n```\n\n## 总结\n\n模板方法模式比较好理解，并且也很常用。上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/template)可以下载。关于模板方法模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中模板方法模式小节。\n","slug":"设计模式之模板方法模式","published":1,"updated":"2017-04-03T02:56:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd0z000oi3i7ta9yzdmu","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>模板方法模式是定义一个操作中算法的框架，而将一些步骤延迟到子类中。例如：把大象装进冰箱分三步：</p>\n<ol>\n<li>把冰箱门打开</li>\n<li>把大象放进去</li>\n<li>把冰箱门关上<br>那么张三可能是把大象横着放进冰箱的，而李四可能是把大象竖着放进冰箱的。不管怎么放的，步骤都是上面那三步。这时候可以将以上三步的顺序确定下来，然后将共同的第一步和第三步的实现放在父类里，父类只做第二步的声明，子类通过重写方法的方式实现自己的第二步玩法。这样不管子类怎么花样放大象，基本的三步都不会被改变。</li>\n</ol>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"/images/201703/模板方法模式类结构图.png\" alt=\"模板方法模式类结构图\"></p>\n<p>如上图所示，模板方法模式一般有两个角色，一个是父类，父类里面定义基本的执行步骤，这里指AbstractClass里的templateMethod()方法定义了方法执行的步骤是先开冰箱门、再放大象进去、再关上冰箱门。另一个是子类，子类重写父类的方法，实现某些步骤的个性化定制，这里指ConcreteClass重写父类的putInElephant()方法实现自己想要的放大象进冰箱的方式。</p>\n<p>模板方法模式中还有一个名词叫钩子方法，钩子方法的作用是想让子类控制父类的行为。例如给上面放大象的方法执行限制一个条件，只有在大象感觉热的时候才把大象放进去，不然不放。那么这个限制条件抽取出来作为一个返回值为Boolean的方法，这个方法就是钩子方法。通过子类重写钩子方法的返回值，可以决定放不放大象进冰箱，这就是通过子类控制父类的行为。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>下面是带钩子方法的模板方法设计模式实现。</p>\n<p><strong>AbstractClass类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开冰箱门</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openFridge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"把冰箱门打开...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//把对象放进冰箱</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">putInElephant</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//关冰箱门</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">closeFridge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"把冰箱门关上...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//钩子方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//模板方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//制定执行步骤</span></div><div class=\"line\">        openFridge();</div><div class=\"line\">        <span class=\"keyword\">if</span> (isHot()) &#123;</div><div class=\"line\">            putInElephant();</div><div class=\"line\">        &#125;</div><div class=\"line\">        closeFridge();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ConcreteClass类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putInElephant</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"把大象横着放进去...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>模板方法模式比较好理解，并且也很常用。上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/template\" target=\"_blank\" rel=\"external\">这个地址</a>可以下载。关于模板方法模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\" target=\"_blank\" rel=\"external\">这本书</a>中模板方法模式小节。</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>模板方法模式是定义一个操作中算法的框架，而将一些步骤延迟到子类中。例如：把大象装进冰箱分三步：</p>\n<ol>\n<li>把冰箱门打开</li>\n<li>把大象放进去</li>\n<li>把冰箱门关上<br>那么张三可能是把大象横着放进冰箱的，而李四可能是把大象竖着放进冰箱的。不管怎么放的，步骤都是上面那三步。这时候可以将以上三步的顺序确定下来，然后将共同的第一步和第三步的实现放在父类里，父类只做第二步的声明，子类通过重写方法的方式实现自己的第二步玩法。这样不管子类怎么花样放大象，基本的三步都不会被改变。</li>\n</ol>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"/images/201703/模板方法模式类结构图.png\" alt=\"模板方法模式类结构图\"></p>\n<p>如上图所示，模板方法模式一般有两个角色，一个是父类，父类里面定义基本的执行步骤，这里指AbstractClass里的templateMethod()方法定义了方法执行的步骤是先开冰箱门、再放大象进去、再关上冰箱门。另一个是子类，子类重写父类的方法，实现某些步骤的个性化定制，这里指ConcreteClass重写父类的putInElephant()方法实现自己想要的放大象进冰箱的方式。</p>\n<p>模板方法模式中还有一个名词叫钩子方法，钩子方法的作用是想让子类控制父类的行为。例如给上面放大象的方法执行限制一个条件，只有在大象感觉热的时候才把大象放进去，不然不放。那么这个限制条件抽取出来作为一个返回值为Boolean的方法，这个方法就是钩子方法。通过子类重写钩子方法的返回值，可以决定放不放大象进冰箱，这就是通过子类控制父类的行为。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>下面是带钩子方法的模板方法设计模式实现。</p>\n<p><strong>AbstractClass类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开冰箱门</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openFridge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"把冰箱门打开...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//把对象放进冰箱</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">putInElephant</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//关冰箱门</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">closeFridge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"把冰箱门关上...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//钩子方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//模板方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">templateMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//制定执行步骤</span></div><div class=\"line\">        openFridge();</div><div class=\"line\">        <span class=\"keyword\">if</span> (isHot()) &#123;</div><div class=\"line\">            putInElephant();</div><div class=\"line\">        &#125;</div><div class=\"line\">        closeFridge();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ConcreteClass类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putInElephant</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"把大象横着放进去...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>模板方法模式比较好理解，并且也很常用。上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/template\">这个地址</a>可以下载。关于模板方法模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\">这本书</a>中模板方法模式小节。</p>\n"},{"title":"设计模式之责任链模式","date":"2017-03-28T15:45:12.000Z","_content":"\n## 概述\n\n上学的时候如果想请假，老师都说要写假条，并且要班主任签字。假如现在假如学校规定，请一天假找班主任签字就行了，请一周假需要找院长签字才行，请一学期假需要找校长签字才行。其实这就是一个责任链。写假条是一个请求，根据请假的天数需要不同的人审批。\n\n我们有一种解决方案是写if else语句，但是想想，如果学校某天修改规定，说请一学期假需要找副校长签字，一年的假期才去需要去找操劳的校长老人家，这时候我们必须要修改原来的if else代码，那么学校每次修改规则，我们都要动原来的代码，这样扩展性不好。\n\n解决这个问题的办法就是使用责任链模式，责任链模式是将请求的处理者组织成一条链，并让请求沿着链传递(链可以是线型的、树型的或者环型的\n)，由链上的处理者对请求进行相应的处理，客户端无须关心请求的处理细节以及请求的传递，只需将请求发送到链上即可，实现请求发送者和请求处理者解耦。\n\n\n## 设计\n\n![责任链模式类结构图](/images/201703/责任链模式类结构图.png)\n\n如上图所示，责任链模式有如下几个角色：\n\n- Client是发请求的客户端，\n\n- Handler是抽象处理者，它定义了一个处理请求的接口，一般设计为抽象类。该类中定义了一个同类型的引用，通过该引用，将处理者可以连成一条链。又定义了一个请求处理方法，子类实现这个方法进行自己对请求的处理。\n\n- ConcreteHandler是具体处理者，它是抽象处理者的子类，实现抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者;在具体处理者中可以访问链中下一个对象，以便请求的转发。\n\n值得注意的是，在责任链模式里，请求是通过处理者持有下家的引用保证的请求在链上传递，Client端只关注将请求发到链上，不关注请求被传递到链上的那个节点上了，也不关注请求被谁处理了，这就是请求发送端和请求处理端的解耦。职责链模式并不创建职责链，职责链的创建工作必须由系统的其他部分来完成，一般是在使用该职责链的客户端中创建职责链。\n\n## 实现\n\n下面介绍具体代码的实现。其中有如下几个角色：\n\n- 一个假条类Note\n\n- 一个处理者类Handler\n\n- 两个具体处理者类，班主任Teacher，院长类Dean\n\n- 一个发请求的客户端类Client\n\n现在我们规定Client发请假请求，请假数为一天的找班主任签字，请假天数大于一天小于一周的找院长签字，大于一周的不给批准。那么实现如下：\n\n__Note类__\n\n``` java\npublic class Note {\n\n    //发起人\n    private String author;\n    //请假天数\n    private int day;\n\n    public Note(String author, int day) {\n        this.author = author;\n        this.day = day;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    public int getDay() {\n        return day;\n    }\n\n    public void setDay(int day) {\n        this.day = day;\n    }\n}\n```\n\n__Handler类__\n\n``` java\npublic abstract class Handler {\n\n    protected Handler next;\n\n    public Handler(Handler next) {\n        this.next = next;\n    }\n\n    //抽象处理请求方法\n    public abstract void handleNote(Note note);\n}\n```\n\n__Teacher类__\n\n``` java\npublic class Teacher extends Handler {\n\n    public Teacher(Handler next) {\n        super(next);\n    }\n\n    @Override\n    public void handleNote(Note note) {\n        //请假天数等于一天才有权限处理，否则交给上级处理\n        int day = note.getDay();\n        if (day == 1) {\n            System.out.println(\"班主任批准了\" + note.getAuthor() + \"请假\" + day + \"天\");\n        } else {\n            if (next != null) {\n                next.handleNote(note);\n            }\n        }\n    }\n}\n```\n\n__Dean类__\n\n``` java\npublic class Dean extends Handler {\n\n    public Dean(Handler next) {\n        super(next);\n    }\n\n    @Override\n    public void handleNote(Note note) {\n        //请假天数大于一天并且小于7天才有权限处理，否则交给上级处理\n        int day = note.getDay();\n        if (day >= 1 && day <= 7) {\n            System.out.println(\"院长批准了\" + note.getAuthor() + \"请假\" + day + \"天\");\n        } else {\n            if (next != null) {\n                next.handleNote(note);\n            }\n        }\n    }\n}\n\n```\n\n__Client类__\n\n``` java\npublic class Client {\n\n    public static void main(String[] args) {\n\n        //创建假条\n        Note note1 = new Note(\"小明\", 1);\n        Note note2 = new Note(\"小黑\", 6);\n\n        //创建处理者责任链\n        Handler dean = new Dean(null);\n        Handler teacher = new Teacher(dean);\n\n        //发起请假请求\n        teacher.handleNote(note1); //小明的请求被老师批准\n        teacher.handleNote(note2); //小黑的请求被院长批准\n\n    }\n}\n```\n\n## 总结\n\n责任链模式在开发中也很常见，例如Web开发中的过滤器就是用的责任链模式将请求一层一层的过滤。上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/chain)可以下载。关于责任链模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中责任链模式小节。","source":"_posts/设计模式之责任链模式.md","raw":"---\ntitle: 设计模式之责任链模式\ndate: 2017-03-28 23:45:12\ncategories: 设计模式\ntags: \n    - 设计模式\n    - 行为型模式\n---\n\n## 概述\n\n上学的时候如果想请假，老师都说要写假条，并且要班主任签字。假如现在假如学校规定，请一天假找班主任签字就行了，请一周假需要找院长签字才行，请一学期假需要找校长签字才行。其实这就是一个责任链。写假条是一个请求，根据请假的天数需要不同的人审批。\n\n我们有一种解决方案是写if else语句，但是想想，如果学校某天修改规定，说请一学期假需要找副校长签字，一年的假期才去需要去找操劳的校长老人家，这时候我们必须要修改原来的if else代码，那么学校每次修改规则，我们都要动原来的代码，这样扩展性不好。\n\n解决这个问题的办法就是使用责任链模式，责任链模式是将请求的处理者组织成一条链，并让请求沿着链传递(链可以是线型的、树型的或者环型的\n)，由链上的处理者对请求进行相应的处理，客户端无须关心请求的处理细节以及请求的传递，只需将请求发送到链上即可，实现请求发送者和请求处理者解耦。\n\n\n## 设计\n\n![责任链模式类结构图](/images/201703/责任链模式类结构图.png)\n\n如上图所示，责任链模式有如下几个角色：\n\n- Client是发请求的客户端，\n\n- Handler是抽象处理者，它定义了一个处理请求的接口，一般设计为抽象类。该类中定义了一个同类型的引用，通过该引用，将处理者可以连成一条链。又定义了一个请求处理方法，子类实现这个方法进行自己对请求的处理。\n\n- ConcreteHandler是具体处理者，它是抽象处理者的子类，实现抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者;在具体处理者中可以访问链中下一个对象，以便请求的转发。\n\n值得注意的是，在责任链模式里，请求是通过处理者持有下家的引用保证的请求在链上传递，Client端只关注将请求发到链上，不关注请求被传递到链上的那个节点上了，也不关注请求被谁处理了，这就是请求发送端和请求处理端的解耦。职责链模式并不创建职责链，职责链的创建工作必须由系统的其他部分来完成，一般是在使用该职责链的客户端中创建职责链。\n\n## 实现\n\n下面介绍具体代码的实现。其中有如下几个角色：\n\n- 一个假条类Note\n\n- 一个处理者类Handler\n\n- 两个具体处理者类，班主任Teacher，院长类Dean\n\n- 一个发请求的客户端类Client\n\n现在我们规定Client发请假请求，请假数为一天的找班主任签字，请假天数大于一天小于一周的找院长签字，大于一周的不给批准。那么实现如下：\n\n__Note类__\n\n``` java\npublic class Note {\n\n    //发起人\n    private String author;\n    //请假天数\n    private int day;\n\n    public Note(String author, int day) {\n        this.author = author;\n        this.day = day;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    public int getDay() {\n        return day;\n    }\n\n    public void setDay(int day) {\n        this.day = day;\n    }\n}\n```\n\n__Handler类__\n\n``` java\npublic abstract class Handler {\n\n    protected Handler next;\n\n    public Handler(Handler next) {\n        this.next = next;\n    }\n\n    //抽象处理请求方法\n    public abstract void handleNote(Note note);\n}\n```\n\n__Teacher类__\n\n``` java\npublic class Teacher extends Handler {\n\n    public Teacher(Handler next) {\n        super(next);\n    }\n\n    @Override\n    public void handleNote(Note note) {\n        //请假天数等于一天才有权限处理，否则交给上级处理\n        int day = note.getDay();\n        if (day == 1) {\n            System.out.println(\"班主任批准了\" + note.getAuthor() + \"请假\" + day + \"天\");\n        } else {\n            if (next != null) {\n                next.handleNote(note);\n            }\n        }\n    }\n}\n```\n\n__Dean类__\n\n``` java\npublic class Dean extends Handler {\n\n    public Dean(Handler next) {\n        super(next);\n    }\n\n    @Override\n    public void handleNote(Note note) {\n        //请假天数大于一天并且小于7天才有权限处理，否则交给上级处理\n        int day = note.getDay();\n        if (day >= 1 && day <= 7) {\n            System.out.println(\"院长批准了\" + note.getAuthor() + \"请假\" + day + \"天\");\n        } else {\n            if (next != null) {\n                next.handleNote(note);\n            }\n        }\n    }\n}\n\n```\n\n__Client类__\n\n``` java\npublic class Client {\n\n    public static void main(String[] args) {\n\n        //创建假条\n        Note note1 = new Note(\"小明\", 1);\n        Note note2 = new Note(\"小黑\", 6);\n\n        //创建处理者责任链\n        Handler dean = new Dean(null);\n        Handler teacher = new Teacher(dean);\n\n        //发起请假请求\n        teacher.handleNote(note1); //小明的请求被老师批准\n        teacher.handleNote(note2); //小黑的请求被院长批准\n\n    }\n}\n```\n\n## 总结\n\n责任链模式在开发中也很常见，例如Web开发中的过滤器就是用的责任链模式将请求一层一层的过滤。上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/chain)可以下载。关于责任链模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中责任链模式小节。","slug":"设计模式之责任链模式","published":1,"updated":"2017-04-03T02:56:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd10000pi3i7v8p0kw7d","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>上学的时候如果想请假，老师都说要写假条，并且要班主任签字。假如现在假如学校规定，请一天假找班主任签字就行了，请一周假需要找院长签字才行，请一学期假需要找校长签字才行。其实这就是一个责任链。写假条是一个请求，根据请假的天数需要不同的人审批。</p>\n<p>我们有一种解决方案是写if else语句，但是想想，如果学校某天修改规定，说请一学期假需要找副校长签字，一年的假期才去需要去找操劳的校长老人家，这时候我们必须要修改原来的if else代码，那么学校每次修改规则，我们都要动原来的代码，这样扩展性不好。</p>\n<p>解决这个问题的办法就是使用责任链模式，责任链模式是将请求的处理者组织成一条链，并让请求沿着链传递(链可以是线型的、树型的或者环型的<br>)，由链上的处理者对请求进行相应的处理，客户端无须关心请求的处理细节以及请求的传递，只需将请求发送到链上即可，实现请求发送者和请求处理者解耦。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"/images/201703/责任链模式类结构图.png\" alt=\"责任链模式类结构图\"></p>\n<p>如上图所示，责任链模式有如下几个角色：</p>\n<ul>\n<li><p>Client是发请求的客户端，</p>\n</li>\n<li><p>Handler是抽象处理者，它定义了一个处理请求的接口，一般设计为抽象类。该类中定义了一个同类型的引用，通过该引用，将处理者可以连成一条链。又定义了一个请求处理方法，子类实现这个方法进行自己对请求的处理。</p>\n</li>\n<li><p>ConcreteHandler是具体处理者，它是抽象处理者的子类，实现抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者;在具体处理者中可以访问链中下一个对象，以便请求的转发。</p>\n</li>\n</ul>\n<p>值得注意的是，在责任链模式里，请求是通过处理者持有下家的引用保证的请求在链上传递，Client端只关注将请求发到链上，不关注请求被传递到链上的那个节点上了，也不关注请求被谁处理了，这就是请求发送端和请求处理端的解耦。职责链模式并不创建职责链，职责链的创建工作必须由系统的其他部分来完成，一般是在使用该职责链的客户端中创建职责链。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>下面介绍具体代码的实现。其中有如下几个角色：</p>\n<ul>\n<li><p>一个假条类Note</p>\n</li>\n<li><p>一个处理者类Handler</p>\n</li>\n<li><p>两个具体处理者类，班主任Teacher，院长类Dean</p>\n</li>\n<li><p>一个发请求的客户端类Client</p>\n</li>\n</ul>\n<p>现在我们规定Client发请假请求，请假数为一天的找班主任签字，请假天数大于一天小于一周的找院长签字，大于一周的不给批准。那么实现如下：</p>\n<p><strong>Note类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Note</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//发起人</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String author;</div><div class=\"line\">    <span class=\"comment\">//请假天数</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> day;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Note</span><span class=\"params\">(String author, <span class=\"keyword\">int</span> day)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.author = author;</div><div class=\"line\">        <span class=\"keyword\">this</span>.day = day;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> author;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAuthor</span><span class=\"params\">(String author)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.author = author;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDay</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> day;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDay</span><span class=\"params\">(<span class=\"keyword\">int</span> day)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.day = day;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Handler类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> Handler next;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Handler next)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//抽象处理请求方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handleNote</span><span class=\"params\">(Note note)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Teacher类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Teacher</span><span class=\"params\">(Handler next)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(next);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleNote</span><span class=\"params\">(Note note)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//请假天数等于一天才有权限处理，否则交给上级处理</span></div><div class=\"line\">        <span class=\"keyword\">int</span> day = note.getDay();</div><div class=\"line\">        <span class=\"keyword\">if</span> (day == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"班主任批准了\"</span> + note.getAuthor() + <span class=\"string\">\"请假\"</span> + day + <span class=\"string\">\"天\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                next.handleNote(note);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Dean类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dean</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dean</span><span class=\"params\">(Handler next)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(next);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleNote</span><span class=\"params\">(Note note)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//请假天数大于一天并且小于7天才有权限处理，否则交给上级处理</span></div><div class=\"line\">        <span class=\"keyword\">int</span> day = note.getDay();</div><div class=\"line\">        <span class=\"keyword\">if</span> (day &gt;= <span class=\"number\">1</span> &amp;&amp; day &lt;= <span class=\"number\">7</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"院长批准了\"</span> + note.getAuthor() + <span class=\"string\">\"请假\"</span> + day + <span class=\"string\">\"天\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                next.handleNote(note);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Client类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建假条</span></div><div class=\"line\">        Note note1 = <span class=\"keyword\">new</span> Note(<span class=\"string\">\"小明\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        Note note2 = <span class=\"keyword\">new</span> Note(<span class=\"string\">\"小黑\"</span>, <span class=\"number\">6</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建处理者责任链</span></div><div class=\"line\">        Handler dean = <span class=\"keyword\">new</span> Dean(<span class=\"keyword\">null</span>);</div><div class=\"line\">        Handler teacher = <span class=\"keyword\">new</span> Teacher(dean);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//发起请假请求</span></div><div class=\"line\">        teacher.handleNote(note1); <span class=\"comment\">//小明的请求被老师批准</span></div><div class=\"line\">        teacher.handleNote(note2); <span class=\"comment\">//小黑的请求被院长批准</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>责任链模式在开发中也很常见，例如Web开发中的过滤器就是用的责任链模式将请求一层一层的过滤。上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/chain\" target=\"_blank\" rel=\"external\">这个地址</a>可以下载。关于责任链模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\" target=\"_blank\" rel=\"external\">这本书</a>中责任链模式小节。</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>上学的时候如果想请假，老师都说要写假条，并且要班主任签字。假如现在假如学校规定，请一天假找班主任签字就行了，请一周假需要找院长签字才行，请一学期假需要找校长签字才行。其实这就是一个责任链。写假条是一个请求，根据请假的天数需要不同的人审批。</p>\n<p>我们有一种解决方案是写if else语句，但是想想，如果学校某天修改规定，说请一学期假需要找副校长签字，一年的假期才去需要去找操劳的校长老人家，这时候我们必须要修改原来的if else代码，那么学校每次修改规则，我们都要动原来的代码，这样扩展性不好。</p>\n<p>解决这个问题的办法就是使用责任链模式，责任链模式是将请求的处理者组织成一条链，并让请求沿着链传递(链可以是线型的、树型的或者环型的<br>)，由链上的处理者对请求进行相应的处理，客户端无须关心请求的处理细节以及请求的传递，只需将请求发送到链上即可，实现请求发送者和请求处理者解耦。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"/images/201703/责任链模式类结构图.png\" alt=\"责任链模式类结构图\"></p>\n<p>如上图所示，责任链模式有如下几个角色：</p>\n<ul>\n<li><p>Client是发请求的客户端，</p>\n</li>\n<li><p>Handler是抽象处理者，它定义了一个处理请求的接口，一般设计为抽象类。该类中定义了一个同类型的引用，通过该引用，将处理者可以连成一条链。又定义了一个请求处理方法，子类实现这个方法进行自己对请求的处理。</p>\n</li>\n<li><p>ConcreteHandler是具体处理者，它是抽象处理者的子类，实现抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者;在具体处理者中可以访问链中下一个对象，以便请求的转发。</p>\n</li>\n</ul>\n<p>值得注意的是，在责任链模式里，请求是通过处理者持有下家的引用保证的请求在链上传递，Client端只关注将请求发到链上，不关注请求被传递到链上的那个节点上了，也不关注请求被谁处理了，这就是请求发送端和请求处理端的解耦。职责链模式并不创建职责链，职责链的创建工作必须由系统的其他部分来完成，一般是在使用该职责链的客户端中创建职责链。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>下面介绍具体代码的实现。其中有如下几个角色：</p>\n<ul>\n<li><p>一个假条类Note</p>\n</li>\n<li><p>一个处理者类Handler</p>\n</li>\n<li><p>两个具体处理者类，班主任Teacher，院长类Dean</p>\n</li>\n<li><p>一个发请求的客户端类Client</p>\n</li>\n</ul>\n<p>现在我们规定Client发请假请求，请假数为一天的找班主任签字，请假天数大于一天小于一周的找院长签字，大于一周的不给批准。那么实现如下：</p>\n<p><strong>Note类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Note</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//发起人</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String author;</div><div class=\"line\">    <span class=\"comment\">//请假天数</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> day;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Note</span><span class=\"params\">(String author, <span class=\"keyword\">int</span> day)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.author = author;</div><div class=\"line\">        <span class=\"keyword\">this</span>.day = day;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> author;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAuthor</span><span class=\"params\">(String author)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.author = author;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDay</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> day;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDay</span><span class=\"params\">(<span class=\"keyword\">int</span> day)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.day = day;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Handler类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> Handler next;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Handler next)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//抽象处理请求方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handleNote</span><span class=\"params\">(Note note)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Teacher类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Teacher</span><span class=\"params\">(Handler next)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(next);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleNote</span><span class=\"params\">(Note note)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//请假天数等于一天才有权限处理，否则交给上级处理</span></div><div class=\"line\">        <span class=\"keyword\">int</span> day = note.getDay();</div><div class=\"line\">        <span class=\"keyword\">if</span> (day == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"班主任批准了\"</span> + note.getAuthor() + <span class=\"string\">\"请假\"</span> + day + <span class=\"string\">\"天\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                next.handleNote(note);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Dean类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dean</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dean</span><span class=\"params\">(Handler next)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(next);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleNote</span><span class=\"params\">(Note note)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//请假天数大于一天并且小于7天才有权限处理，否则交给上级处理</span></div><div class=\"line\">        <span class=\"keyword\">int</span> day = note.getDay();</div><div class=\"line\">        <span class=\"keyword\">if</span> (day &gt;= <span class=\"number\">1</span> &amp;&amp; day &lt;= <span class=\"number\">7</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"院长批准了\"</span> + note.getAuthor() + <span class=\"string\">\"请假\"</span> + day + <span class=\"string\">\"天\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                next.handleNote(note);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Client类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建假条</span></div><div class=\"line\">        Note note1 = <span class=\"keyword\">new</span> Note(<span class=\"string\">\"小明\"</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        Note note2 = <span class=\"keyword\">new</span> Note(<span class=\"string\">\"小黑\"</span>, <span class=\"number\">6</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建处理者责任链</span></div><div class=\"line\">        Handler dean = <span class=\"keyword\">new</span> Dean(<span class=\"keyword\">null</span>);</div><div class=\"line\">        Handler teacher = <span class=\"keyword\">new</span> Teacher(dean);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//发起请假请求</span></div><div class=\"line\">        teacher.handleNote(note1); <span class=\"comment\">//小明的请求被老师批准</span></div><div class=\"line\">        teacher.handleNote(note2); <span class=\"comment\">//小黑的请求被院长批准</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>责任链模式在开发中也很常见，例如Web开发中的过滤器就是用的责任链模式将请求一层一层的过滤。上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/chain\">这个地址</a>可以下载。关于责任链模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\">这本书</a>中责任链模式小节。</p>\n"},{"title":"设计模式之观察者模式","date":"2017-03-28T02:18:43.000Z","_content":"\n## 概述\n\n观察者模式指一个对象的状态或行为的变化将导致其他对象的状态或行为也发生改变，也就是说对象之间存在一种一对多(包括一对一)的联动关系，一个对象发生改变时能够通知其他对象，其他对象也作出相应的改变。例如，红绿灯的变化可以影响车辆行驶的变化。\n\n观察者模式的别名包括发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器 (Source/Listener)模式或从属者(Dependents)模式。观察者模式是一种对象行为型模式。\n\n在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。\n\n## 设计\n\n![观察者模式类结构图](/images/201703/观察者模式类结构图.png)\n\n如上图所示，一般的观察者模式有四个角色，分别是目标接口(Subject)、目标接口实现类(SubjectImpl)、观察者接口(Observer)、观察者接口实现类(ObserverImpl)。Subject接口定义了三个方法，attach方法和detach方法用来注册和注销观察者对目标类的关注；notify方法用来通知所有的观察者，内部使用循环实现。Observer接口定义了一个update方法，该方法作用是观察者根据目标状态的改变做相应的响应。\n\n## 实现\n\n__Subject类__\n\n``` java\npublic interface Subject {\n\n    //注册方法\n    public void attach(Observer observer);\n\n    //注销方法\n    public void detach(Observer observer);\n\n    //通知方法\n    public void notice();\n}\n```\n\n__SubjectImpl类__\n\n``` java\npublic class SubjectImpl implements Subject {\n\n    private List<Observer> observers = new ArrayList<Observer>();\n\n    //注册方法\n    public void attach(Observer observer) {\n        System.out.println(\"attach a observer...\");\n        observers.add(observer);\n    }\n\n    //注销方法\n    public void detach(Observer observer) {\n        System.out.println(\"detach a observer...\");\n        observers.remove(observer);\n    }\n\n    //通知方法\n    public void notice() {\n        System.out.println(\"notice observers...\");\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n}\n```\n\n__Observer类__\n\n``` java\npublic interface Observer {\n\n    //响应方法\n    public void update();\n}\n```\n\n__ObserverImpl类__\n\n``` java\npublic class ObserverImpl implements Observer {\n\n    //响应方法\n    public void update() {\n        System.out.println(\"observer update...\");\n    }\n}\n```\n\n## 总结\n\n观察者模式是最常使用的设计模式之一，上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/observer)可以下载。关于观察者模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中观察者模式小节。","source":"_posts/设计模式之观察者模式.md","raw":"---\ntitle: 设计模式之观察者模式\ndate: 2017-03-28 10:18:43\ncategories: 设计模式\ntags: \n    - 设计模式\n    - 行为型模式\n---\n\n## 概述\n\n观察者模式指一个对象的状态或行为的变化将导致其他对象的状态或行为也发生改变，也就是说对象之间存在一种一对多(包括一对一)的联动关系，一个对象发生改变时能够通知其他对象，其他对象也作出相应的改变。例如，红绿灯的变化可以影响车辆行驶的变化。\n\n观察者模式的别名包括发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器 (Source/Listener)模式或从属者(Dependents)模式。观察者模式是一种对象行为型模式。\n\n在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。\n\n## 设计\n\n![观察者模式类结构图](/images/201703/观察者模式类结构图.png)\n\n如上图所示，一般的观察者模式有四个角色，分别是目标接口(Subject)、目标接口实现类(SubjectImpl)、观察者接口(Observer)、观察者接口实现类(ObserverImpl)。Subject接口定义了三个方法，attach方法和detach方法用来注册和注销观察者对目标类的关注；notify方法用来通知所有的观察者，内部使用循环实现。Observer接口定义了一个update方法，该方法作用是观察者根据目标状态的改变做相应的响应。\n\n## 实现\n\n__Subject类__\n\n``` java\npublic interface Subject {\n\n    //注册方法\n    public void attach(Observer observer);\n\n    //注销方法\n    public void detach(Observer observer);\n\n    //通知方法\n    public void notice();\n}\n```\n\n__SubjectImpl类__\n\n``` java\npublic class SubjectImpl implements Subject {\n\n    private List<Observer> observers = new ArrayList<Observer>();\n\n    //注册方法\n    public void attach(Observer observer) {\n        System.out.println(\"attach a observer...\");\n        observers.add(observer);\n    }\n\n    //注销方法\n    public void detach(Observer observer) {\n        System.out.println(\"detach a observer...\");\n        observers.remove(observer);\n    }\n\n    //通知方法\n    public void notice() {\n        System.out.println(\"notice observers...\");\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n}\n```\n\n__Observer类__\n\n``` java\npublic interface Observer {\n\n    //响应方法\n    public void update();\n}\n```\n\n__ObserverImpl类__\n\n``` java\npublic class ObserverImpl implements Observer {\n\n    //响应方法\n    public void update() {\n        System.out.println(\"observer update...\");\n    }\n}\n```\n\n## 总结\n\n观察者模式是最常使用的设计模式之一，上面实现的代码在[这个地址](https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/observer)可以下载。关于观察者模式更详细的内容推荐阅读[这本书](https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf)中观察者模式小节。","slug":"设计模式之观察者模式","published":1,"updated":"2017-04-03T02:56:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj20hwd12000ti3i7x6lgt0th","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>观察者模式指一个对象的状态或行为的变化将导致其他对象的状态或行为也发生改变，也就是说对象之间存在一种一对多(包括一对一)的联动关系，一个对象发生改变时能够通知其他对象，其他对象也作出相应的改变。例如，红绿灯的变化可以影响车辆行驶的变化。</p>\n<p>观察者模式的别名包括发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器 (Source/Listener)模式或从属者(Dependents)模式。观察者模式是一种对象行为型模式。</p>\n<p>在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"/images/201703/观察者模式类结构图.png\" alt=\"观察者模式类结构图\"></p>\n<p>如上图所示，一般的观察者模式有四个角色，分别是目标接口(Subject)、目标接口实现类(SubjectImpl)、观察者接口(Observer)、观察者接口实现类(ObserverImpl)。Subject接口定义了三个方法，attach方法和detach方法用来注册和注销观察者对目标类的关注；notify方法用来通知所有的观察者，内部使用循环实现。Observer接口定义了一个update方法，该方法作用是观察者根据目标状态的改变做相应的响应。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><strong>Subject类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注册方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Observer observer)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注销方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">detach</span><span class=\"params\">(Observer observer)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//通知方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>SubjectImpl类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;Observer&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注册方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Observer observer)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"attach a observer...\"</span>);</div><div class=\"line\">        observers.add(observer);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注销方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">detach</span><span class=\"params\">(Observer observer)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"detach a observer...\"</span>);</div><div class=\"line\">        observers.remove(observer);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//通知方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"notice observers...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</div><div class=\"line\">            observer.update();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Observer类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//响应方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ObserverImpl类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//响应方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"observer update...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>观察者模式是最常使用的设计模式之一，上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/observer\" target=\"_blank\" rel=\"external\">这个地址</a>可以下载。关于观察者模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\" target=\"_blank\" rel=\"external\">这本书</a>中观察者模式小节。</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>观察者模式指一个对象的状态或行为的变化将导致其他对象的状态或行为也发生改变，也就是说对象之间存在一种一对多(包括一对一)的联动关系，一个对象发生改变时能够通知其他对象，其他对象也作出相应的改变。例如，红绿灯的变化可以影响车辆行驶的变化。</p>\n<p>观察者模式的别名包括发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器 (Source/Listener)模式或从属者(Dependents)模式。观察者模式是一种对象行为型模式。</p>\n<p>在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"/images/201703/观察者模式类结构图.png\" alt=\"观察者模式类结构图\"></p>\n<p>如上图所示，一般的观察者模式有四个角色，分别是目标接口(Subject)、目标接口实现类(SubjectImpl)、观察者接口(Observer)、观察者接口实现类(ObserverImpl)。Subject接口定义了三个方法，attach方法和detach方法用来注册和注销观察者对目标类的关注；notify方法用来通知所有的观察者，内部使用循环实现。Observer接口定义了一个update方法，该方法作用是观察者根据目标状态的改变做相应的响应。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><strong>Subject类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注册方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Observer observer)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注销方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">detach</span><span class=\"params\">(Observer observer)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//通知方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>SubjectImpl类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;Observer&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注册方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Observer observer)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"attach a observer...\"</span>);</div><div class=\"line\">        observers.add(observer);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//注销方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">detach</span><span class=\"params\">(Observer observer)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"detach a observer...\"</span>);</div><div class=\"line\">        observers.remove(observer);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//通知方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"notice observers...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</div><div class=\"line\">            observer.update();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Observer类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//响应方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ObserverImpl类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//响应方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"observer update...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>观察者模式是最常使用的设计模式之一，上面实现的代码在<a href=\"https://github.com/jhscpang/designPattern/tree/master/src/main/java/tech/pangchao/observer\">这个地址</a>可以下载。关于观察者模式更详细的内容推荐阅读<a href=\"https://github.com/jhscpang/books/blob/master/design-pattern-java.pdf\">这本书</a>中观察者模式小节。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj20hwd060000i3i783k81puq","category_id":"cj20hwd0e0004i3i7830whapc","_id":"cj20hwd0q000ci3i70fkgvx6w"},{"post_id":"cj20hwd0l0008i3i7xpknprri","category_id":"cj20hwd0e0004i3i7830whapc","_id":"cj20hwd0t000gi3i7b4q34rzq"},{"post_id":"cj20hwd0b0002i3i7i7wyfar9","category_id":"cj20hwd0o0009i3i7nxo6wlrl","_id":"cj20hwd0w000ki3i7d6u0pr72"},{"post_id":"cj20hwd0g0006i3i7h10ddzf4","category_id":"cj20hwd0e0004i3i7830whapc","_id":"cj20hwd11000qi3i7vstegq20"},{"post_id":"cj20hwd0p000bi3i7r1e0ex0w","category_id":"cj20hwd0x000mi3i73zwwcx5e","_id":"cj20hwd16000vi3i7on018jdc"},{"post_id":"cj20hwd0r000di3i7vsnb0351","category_id":"cj20hwd12000ri3i73vhaoejp","_id":"cj20hwd18000zi3i7g2112yi1"},{"post_id":"cj20hwd0t000hi3i7a02142kc","category_id":"cj20hwd16000xi3i7fid8yva9","_id":"cj20hwd1a0013i3i76nm4o9b1"},{"post_id":"cj20hwd0z000oi3i7ta9yzdmu","category_id":"cj20hwd16000xi3i7fid8yva9","_id":"cj20hwd1b0018i3i7ebmyz0fe"},{"post_id":"cj20hwd10000pi3i7v8p0kw7d","category_id":"cj20hwd16000xi3i7fid8yva9","_id":"cj20hwd1c001di3i7zjqqjgjb"},{"post_id":"cj20hwd12000ti3i7x6lgt0th","category_id":"cj20hwd16000xi3i7fid8yva9","_id":"cj20hwd1d001gi3i71vmw1xhy"}],"PostTag":[{"post_id":"cj20hwd060000i3i783k81puq","tag_id":"cj20hwd0f0005i3i7i6ol93et","_id":"cj20hwd0u000ii3i7x10fs68i"},{"post_id":"cj20hwd060000i3i783k81puq","tag_id":"cj20hwd0o000ai3i7z0kvvpqr","_id":"cj20hwd0w000li3i7o2hzawwf"},{"post_id":"cj20hwd0b0002i3i7i7wyfar9","tag_id":"cj20hwd0s000fi3i78cn4ei3a","_id":"cj20hwd14000ui3i7911p39no"},{"post_id":"cj20hwd0b0002i3i7i7wyfar9","tag_id":"cj20hwd0x000ni3i7m2bwbh2v","_id":"cj20hwd16000wi3i7bvh2r1ha"},{"post_id":"cj20hwd0g0006i3i7h10ddzf4","tag_id":"cj20hwd0f0005i3i7i6ol93et","_id":"cj20hwd190012i3i7wm7p16y5"},{"post_id":"cj20hwd0g0006i3i7h10ddzf4","tag_id":"cj20hwd16000yi3i7ty2o8w6v","_id":"cj20hwd1a0014i3i7gxzutnst"},{"post_id":"cj20hwd0l0008i3i7xpknprri","tag_id":"cj20hwd0f0005i3i7i6ol93et","_id":"cj20hwd1a0017i3i75w6t5oh6"},{"post_id":"cj20hwd0l0008i3i7xpknprri","tag_id":"cj20hwd190011i3i7hz7o3ex8","_id":"cj20hwd1b001ai3i77mt6op5j"},{"post_id":"cj20hwd0p000bi3i7r1e0ex0w","tag_id":"cj20hwd1a0016i3i7zyda93c5","_id":"cj20hwd1c001ci3i74jznfks3"},{"post_id":"cj20hwd0r000di3i7vsnb0351","tag_id":"cj20hwd1b001bi3i7fbqmbwv2","_id":"cj20hwd1d001fi3i7mwsb19fr"},{"post_id":"cj20hwd0t000hi3i7a02142kc","tag_id":"cj20hwd1d001ei3i7x1qh2djo","_id":"cj20hwd1e001ji3i7lqth1150"},{"post_id":"cj20hwd0t000hi3i7a02142kc","tag_id":"cj20hwd1e001hi3i7frdfpk2x","_id":"cj20hwd1f001ki3i7yj7xybst"},{"post_id":"cj20hwd0z000oi3i7ta9yzdmu","tag_id":"cj20hwd1d001ei3i7x1qh2djo","_id":"cj20hwd1g001ni3i78z2jksl3"},{"post_id":"cj20hwd0z000oi3i7ta9yzdmu","tag_id":"cj20hwd1e001hi3i7frdfpk2x","_id":"cj20hwd1g001oi3i7v6q6wmhp"},{"post_id":"cj20hwd10000pi3i7v8p0kw7d","tag_id":"cj20hwd1d001ei3i7x1qh2djo","_id":"cj20hwd1h001ri3i7kib1gn67"},{"post_id":"cj20hwd10000pi3i7v8p0kw7d","tag_id":"cj20hwd1e001hi3i7frdfpk2x","_id":"cj20hwd1h001si3i7dd7runpw"},{"post_id":"cj20hwd12000ti3i7x6lgt0th","tag_id":"cj20hwd1d001ei3i7x1qh2djo","_id":"cj20hwd1i001ui3i7kyaxeh8q"},{"post_id":"cj20hwd12000ti3i7x6lgt0th","tag_id":"cj20hwd1e001hi3i7frdfpk2x","_id":"cj20hwd1j001vi3i7a28o7bmt"}],"Tag":[{"name":"算法","_id":"cj20hwd0f0005i3i7i6ol93et"},{"name":"哈希","_id":"cj20hwd0o000ai3i7z0kvvpqr"},{"name":"Java","_id":"cj20hwd0s000fi3i78cn4ei3a"},{"name":"ConcurrentHashMap","_id":"cj20hwd0x000ni3i7m2bwbh2v"},{"name":"搜索","_id":"cj20hwd16000yi3i7ty2o8w6v"},{"name":"动态规划","_id":"cj20hwd190011i3i7hz7o3ex8"},{"name":"论文","_id":"cj20hwd1a0016i3i7zyda93c5"},{"name":"二维码","_id":"cj20hwd1b001bi3i7fbqmbwv2"},{"name":"设计模式","_id":"cj20hwd1d001ei3i7x1qh2djo"},{"name":"行为型模式","_id":"cj20hwd1e001hi3i7frdfpk2x"}]}}